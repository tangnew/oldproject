From: <Saved by Blink>
Subject: Chart.js | Documentation
Date: Mon, 21 Aug 2016 23:32:12 -0000
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----=_NextPart_000_2C6C_FCA04B9C.AFB8C24D"

------=_NextPart_000_2C6C_FCA04B9C.AFB8C24D
Content-Type: text/html
Content-Transfer-Encoding: quoted-printable
Content-Location: http://www.chartjs.org/docs/#line-chart-chart-options

<!DOCTYPE html><html class=3D"wf-proximanova-n3-active wf-proximanovasoft-n=
4-active wf-proximanovasoft-n6-active wf-active"><head><meta http-equiv=3D"=
Content-Type" content=3D"text/html; charset=3DGBK">
		<title>Chart.js | Documentation</title>
	=09
<style type=3D"text/css">@font-face{font-family:tk-proxima-nova-n3;src:url(=
https://fonts.typekit.net/af/015ec8/00000000000000003b9ad1b5/27/l?primer=3D=
7ceb210e49ade74e23101e10f006f110a0b6588c7c57777a6e3d98a38b749696&fvd=3Dn3) =
format("woff2");font-weight:300;font-style:normal;}@font-face{font-family:t=
k-proxima-nova-soft-n4;src:url(https://fonts.typekit.net/af/b5823a/00000000=
000000000001743c/27/l?primer=3D7ceb210e49ade74e23101e10f006f110a0b6588c7c57=
777a6e3d98a38b749696&fvd=3Dn4) format("woff2");font-weight:400;font-style:n=
ormal;}@font-face{font-family:tk-proxima-nova-soft-n6;src:url(https://fonts=
.typekit.net/af/19eac5/00000000000000000001743e/27/l?primer=3D7ceb210e49ade=
74e23101e10f006f110a0b6588c7c57777a6e3d98a38b749696&fvd=3Dn6) format("woff2=
");font-weight:600;font-style:normal;}</style>

	=09
		<link rel=3D"icon" href=3D"http://www.chartjs.org/favicon.ico">
		<link rel=3D"stylesheet" type=3D"text/css" href=3D"http://www.chartjs.org=
/styles.css">
		<style type=3D"text/css">@font-face{font-family:proxima-nova;src:url(http=
s://fonts.typekit.net/af/015ec8/00000000000000003b9ad1b5/27/l?primer=3D7ceb=
210e49ade74e23101e10f006f110a0b6588c7c57777a6e3d98a38b749696&fvd=3Dn3) form=
at("woff2");font-weight:300;font-style:normal;}@font-face{font-family:proxi=
ma-nova-soft;src:url(https://fonts.typekit.net/af/b5823a/000000000000000000=
01743c/27/l?primer=3D7ceb210e49ade74e23101e10f006f110a0b6588c7c57777a6e3d98=
a38b749696&fvd=3Dn4) format("woff2");font-weight:400;font-style:normal;}@fo=
nt-face{font-family:proxima-nova-soft;src:url(https://fonts.typekit.net/af/=
19eac5/00000000000000000001743e/27/l?primer=3D7ceb210e49ade74e23101e10f006f=
110a0b6588c7c57777a6e3d98a38b749696&fvd=3Dn6) format("woff2");font-weight:6=
00;font-style:normal;}</style>
	</head>

=09

=09

	<body class=3D"sidebar-padded">
		<nav class=3D"sidebar">
		=09
			=09
	<div class=3D"sidebar-section">
		<h4 class=3D"section-link">
			<a href=3D"http://www.chartjs.org/docs/#getting-started">Getting started=
</a>
		</h4>
		<ul class=3D"section-sublinks">
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#getting-started-download-chart=
-js">Download Chart.js</a></li>
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#getting-started-installation">=
Installation</a></li>
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#getting-started-selecting-the-=
correct-build">Selecting the Correct Build</a></li>
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#getting-started-usage">Usage</=
a></li>
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#getting-started-creating-a-cha=
rt">Creating a Chart</a></li>
		=09
		</ul>
	</div>

		=09
			=09
	<div class=3D"sidebar-section">
		<h4 class=3D"section-link">
			<a href=3D"http://www.chartjs.org/docs/#chart-configuration">Chart Confi=
guration</a>
		</h4>
		<ul class=3D"section-sublinks">
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#chart-configuration-chart-data=
">Chart Data</a></li>
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#chart-configuration-creating-a=
-chart-with-options">Creating a Chart with Options</a></li>
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#chart-configuration-global-con=
figuration">Global Configuration</a></li>
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#chart-configuration-common-cha=
rt-configuration">Common Chart Configuration</a></li>
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#chart-configuration-title-conf=
iguration">Title Configuration</a></li>
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#chart-configuration-legend-con=
figuration">Legend Configuration</a></li>
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#chart-configuration-tooltip-co=
nfiguration">Tooltip Configuration</a></li>
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#chart-configuration-hover-conf=
iguration">Hover Configuration</a></li>
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#chart-configuration-animation-=
configuration">Animation Configuration</a></li>
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#chart-configuration-element-co=
nfiguration">Element Configuration</a></li>
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#chart-configuration-colors">Co=
lors</a></li>
		=09
		</ul>
	</div>

		=09
			=09
	<div class=3D"sidebar-section">
		<h4 class=3D"section-link">
			<a href=3D"http://www.chartjs.org/docs/#line-chart">Line Chart</a>
		</h4>
		<ul class=3D"section-sublinks">
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#line-chart-introduction">Intro=
duction</a></li>
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#line-chart-example-usage">Exam=
ple Usage</a></li>
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#line-chart-data-structure">Dat=
a Structure</a></li>
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#line-chart-data-points">Data P=
oints</a></li>
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#line-chart-scatter-line-charts=
">Scatter Line Charts</a></li>
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#line-chart-chart-options">Char=
t Options</a></li>
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#line-chart-stacked-charts">Sta=
cked Charts</a></li>
		=09
		</ul>
	</div>

		=09
			=09
	<div class=3D"sidebar-section">
		<h4 class=3D"section-link">
			<a href=3D"http://www.chartjs.org/docs/#bar-chart">Bar Chart</a>
		</h4>
		<ul class=3D"section-sublinks">
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#bar-chart-introduction">Introd=
uction</a></li>
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#bar-chart-example-usage">Examp=
le Usage</a></li>
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#bar-chart-data-structure">Data=
 Structure</a></li>
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#bar-chart-chart-options">Chart=
 Options</a></li>
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#bar-chart-barpercentage-vs-cat=
egorypercentage">barPercentage vs categoryPercentage</a></li>
		=09
		</ul>
	</div>

		=09
			=09
	<div class=3D"sidebar-section">
		<h4 class=3D"section-link">
			<a href=3D"http://www.chartjs.org/docs/#radar-chart">Radar Chart</a>
		</h4>
		<ul class=3D"section-sublinks">
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#radar-chart-introduction">Intr=
oduction</a></li>
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#radar-chart-example-usage">Exa=
mple Usage</a></li>
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#radar-chart-data-structure">Da=
ta Structure</a></li>
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#radar-chart-chart-options">Cha=
rt Options</a></li>
		=09
		</ul>
	</div>

		=09
			=09
	<div class=3D"sidebar-section">
		<h4 class=3D"section-link">
			<a href=3D"http://www.chartjs.org/docs/#polar-area-chart">Polar Area Cha=
rt</a>
		</h4>
		<ul class=3D"section-sublinks">
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#polar-area-chart-introduction"=
>Introduction</a></li>
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#polar-area-chart-example-usage=
">Example Usage</a></li>
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#polar-area-chart-data-structur=
e">Data Structure</a></li>
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#polar-area-chart-chart-options=
">Chart Options</a></li>
		=09
		</ul>
	</div>

		=09
			=09
	<div class=3D"sidebar-section">
		<h4 class=3D"section-link">
			<a href=3D"http://www.chartjs.org/docs/#doughnut-pie-chart">Pie &amp; Do=
ughnut Charts</a>
		</h4>
		<ul class=3D"section-sublinks">
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#doughnut-pie-chart-introductio=
n">Introduction</a></li>
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#doughnut-pie-chart-example-usa=
ge">Example Usage</a></li>
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#doughnut-pie-chart-data-struct=
ure">Data Structure</a></li>
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#doughnut-pie-chart-chart-optio=
ns">Chart Options</a></li>
		=09
		</ul>
	</div>

		=09
			=09
	<div class=3D"sidebar-section">
		<h4 class=3D"section-link">
			<a href=3D"http://www.chartjs.org/docs/#bubble-chart">Bubble Chart</a>
		</h4>
		<ul class=3D"section-sublinks">
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#bubble-chart-introduction">Int=
roduction</a></li>
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#bubble-chart-example-usage">Ex=
ample Usage</a></li>
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#bubble-chart-data-structure">D=
ata Structure</a></li>
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#bubble-chart-data-object">Data=
 Object</a></li>
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#bubble-chart-chart-options">Ch=
art Options</a></li>
		=09
		</ul>
	</div>

		=09
			=09
	<div class=3D"sidebar-section">
		<h4 class=3D"section-link">
			<a href=3D"http://www.chartjs.org/docs/#scales">Scales</a>
		</h4>
		<ul class=3D"section-sublinks">
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#scales-common-configuration">C=
ommon Configuration</a></li>
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#scales-category-scale">Categor=
y Scale</a></li>
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#scales-linear-scale">Linear Sc=
ale</a></li>
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#scales-logarithmic-scale">Loga=
rithmic Scale</a></li>
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#scales-time-scale">Time Scale<=
/a></li>
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#scales-radial-linear-scale">Ra=
dial Linear Scale</a></li>
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#scales-update-default-scale-co=
nfig">Update Default Scale config</a></li>
		=09
		</ul>
	</div>

		=09
			=09
	<div class=3D"sidebar-section">
		<h4 class=3D"section-link">
			<a href=3D"http://www.chartjs.org/docs/#advanced-usage">Advanced usage</=
a>
		</h4>
		<ul class=3D"section-sublinks">
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#advanced-usage-prototype-metho=
ds">Prototype Methods</a></li>
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#advanced-usage-external-toolti=
ps">External Tooltips</a></li>
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#advanced-usage-writing-new-sca=
le-types">Writing New Scale Types</a></li>
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#advanced-usage-writing-new-cha=
rt-types">Writing New Chart Types</a></li>
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#advanced-usage-extending-exist=
ing-chart-types">Extending Existing Chart Types</a></li>
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#advanced-usage-creating-plugin=
s">Creating Plugins</a></li>
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#advanced-usage-building-chart-=
js">Building Chart.js</a></li>
		=09
		</ul>
	</div>

		=09
			=09
	<div class=3D"sidebar-section">
		<h4 class=3D"section-link">
			<a href=3D"http://www.chartjs.org/docs/#notes">Notes</a>
		</h4>
		<ul class=3D"section-sublinks">
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#notes-previous-versions">Previ=
ous versions</a></li>
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#notes-browser-support">Browser=
 support</a></li>
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#notes-bugs-amp-issues">Bugs &a=
mp; issues</a></li>
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#notes-contributing">Contributi=
ng</a></li>
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#notes-license">License</a></li=
>
		=09
		</ul>
	</div>

		=09
		</nav>

		<div class=3D"documentation-header">
			<img class=3D"chart-logo" src=3D"http://www.chartjs.org/img/chartjs-logo=
.svg">
			<div class=3D"documentation-title-wrapper">
				<h1 class=3D"hero-title">Chart.js</h1>
				<h2 class=3D"hero-subtitle">API Documentation</h2>
			</div>
		</div>
		<div class=3D"documentation-body">
		=09
			=09
	<section id=3D"getting-started">
		<h2 class=3D"section-title">
			<a class=3D"fragment-link" href=3D"http://www.chartjs.org/docs/#getting-=
started">Getting started</a>
		</h2>
		<div class=3D"section-text">
			<h3 id=3D"getting-started-download-chart-js"><a class=3D"fragment-link" =
href=3D"http://www.chartjs.org/docs/#getting-started-download-chart-js">Dow=
nload Chart.js</a></h3><p>You can download the latest version of <a href=3D=
"https://github.com/chartjs/Chart.js/releases/latest" target=3D"_blank">Cha=
rt.js on GitHub</a> or just use these <a href=3D"https://cdnjs.com/librarie=
s/Chart.js" target=3D"_blank">Chart.js CDN</a> links.</p>
<h3 id=3D"getting-started-installation"><a class=3D"fragment-link" href=3D"=
http://www.chartjs.org/docs/#getting-started-installation">Installation</a>=
</h3><h4>npm</h4><pre><code class=3D"lang-bash">npm install chart.js --save
</code></pre>
<h4>bower</h4><p>Bower support has been dropped since version 2.2.0 but you=
 can still use Chart.js with Bower thanks to <a href=3D"https://www.npmjs.c=
om/package/bower-npm-resolver" target=3D"_blank">bower-npm-resolver</a>.</p=
>
<p>First, add the resolver in your .bowerrc file:</p>
<pre><code class=3D"lang-json">{
  "resolvers": [
    "bower-npm-resolver"
  ]
}
</code></pre>
<p>Then:</p>
<pre><code class=3D"lang-bash">npm install -g bower-npm-resolver
bower install npm:chart.js --save
</code></pre>
<h3 id=3D"getting-started-selecting-the-correct-build"><a class=3D"fragment=
-link" href=3D"http://www.chartjs.org/docs/#getting-started-selecting-the-c=
orrect-build">Selecting the Correct Build</a></h3><p>Chart.js provides two =
different builds that are available for your use. The <code>Chart.js</code>=
 and <code>Chart.min.js</code> files include Chart.js and the accompanying =
color parsing library. If this version is used and you require the use of t=
he time axis, <a href=3D"http://momentjs.com/" target=3D"_blank">Moment.js<=
/a> will need to be included before Chart.js.</p>
<p>The <code>Chart.bundle.js</code> and <code>Chart.bundle.min.js</code> bu=
ilds include Moment.js in a single file. This version should be used if you=
 require time axes and want a single file to include, select this version. =
Do not use this build if your application already includes Moment.js. If yo=
u do, Moment.js will be included twice, increasing the page load time and p=
otentially introducing version issues.</p>
<h3 id=3D"getting-started-usage"><a class=3D"fragment-link" href=3D"http://=
www.chartjs.org/docs/#getting-started-usage">Usage</a></h3><p>To import Cha=
rt.js using an old-school script tag:</p>
<pre><code class=3D"lang-html"><span class=3D"hljs-tag">&lt;<span class=3D"=
hljs-name">script</span> <span class=3D"hljs-attr">src</span>=3D<span class=
=3D"hljs-string">"Chart.js"</span>&gt;</span><span class=3D"undefined"></sp=
an><span class=3D"hljs-tag">&lt;/<span class=3D"hljs-name">script</span>&gt=
;</span>
<span class=3D"hljs-tag">&lt;<span class=3D"hljs-name">script</span>&gt;</s=
pan><span class=3D"actionscript">
    <span class=3D"hljs-keyword">var</span> myChart =3D <span class=3D"hljs=
-keyword">new</span> Chart({...})
</span><span class=3D"hljs-tag">&lt;/<span class=3D"hljs-name">script</span=
>&gt;</span>
</code></pre>
<p>To import Chart.js using an awesome module loader:</p>
<pre><code class=3D"lang-javascript">
<span class=3D"hljs-comment">// Using CommonJS</span>
<span class=3D"hljs-keyword">var</span> Chart =3D <span class=3D"hljs-built=
_in">require</span>(<span class=3D"hljs-string">'src/chart.js'</span>)
<span class=3D"hljs-keyword">var</span> myChart =3D <span class=3D"hljs-key=
word">new</span> Chart({...})

<span class=3D"hljs-comment">// ES6</span>
<span class=3D"hljs-keyword">import</span> Chart <span class=3D"hljs-keywor=
d">from</span> <span class=3D"hljs-string">'src/chart.js'</span>
<span class=3D"hljs-keyword">let</span> myChart =3D <span class=3D"hljs-key=
word">new</span> Chart({...})

<span class=3D"hljs-comment">// Using requirejs</span>
<span class=3D"hljs-built_in">require</span>([<span class=3D"hljs-string">'=
path/to/Chartjs'</span>], <span class=3D"hljs-function"><span class=3D"hljs=
-keyword">function</span>(<span class=3D"hljs-params">Chart</span>)</span>{
 <span class=3D"hljs-keyword">var</span> myChart =3D <span class=3D"hljs-ke=
yword">new</span> Chart({...})
})
</code></pre>
<h3 id=3D"getting-started-creating-a-chart"><a class=3D"fragment-link" href=
=3D"http://www.chartjs.org/docs/#getting-started-creating-a-chart">Creating=
 a Chart</a></h3><p>To create a chart, we need to instantiate the <code>Cha=
rt</code> class. To do this, we need to pass in the node, jQuery instance, =
or 2d context of the canvas of where we want to draw the chart. Here's an e=
xample.</p>
<pre><code class=3D"lang-html"><span class=3D"hljs-tag">&lt;<span class=3D"=
hljs-name">canvas</span> <span class=3D"hljs-attr">id</span>=3D<span class=
=3D"hljs-string">"myChart"</span> <span class=3D"hljs-attr">width</span>=3D=
<span class=3D"hljs-string">"400"</span> <span class=3D"hljs-attr">height</=
span>=3D<span class=3D"hljs-string">"400"</span>&gt;</span><span class=3D"h=
ljs-tag">&lt;/<span class=3D"hljs-name">canvas</span>&gt;</span>
</code></pre>
<pre><code class=3D"lang-javascript"><span class=3D"hljs-comment">// Any of=
 the following formats may be used</span>
<span class=3D"hljs-keyword">var</span> ctx =3D <span class=3D"hljs-built_i=
n">document</span>.getElementById(<span class=3D"hljs-string">"myChart"</sp=
an>);
<span class=3D"hljs-keyword">var</span> ctx =3D <span class=3D"hljs-built_i=
n">document</span>.getElementById(<span class=3D"hljs-string">"myChart"</sp=
an>).getContext(<span class=3D"hljs-string">"2d"</span>);
<span class=3D"hljs-keyword">var</span> ctx =3D $(<span class=3D"hljs-strin=
g">"#myChart"</span>);
</code></pre>
<p>Once you have the element or context, you're ready to instantiate a pre-=
defined chart-type or create your own!</p>
<p>The following example instantiates a bar chart showing the number of vot=
es for different colors and the y-axis starting at 0.</p>
<pre><code class=3D"lang-html"><span class=3D"hljs-tag">&lt;<span class=3D"=
hljs-name">canvas</span> <span class=3D"hljs-attr">id</span>=3D<span class=
=3D"hljs-string">"myChart"</span> <span class=3D"hljs-attr">width</span>=3D=
<span class=3D"hljs-string">"400"</span> <span class=3D"hljs-attr">height</=
span>=3D<span class=3D"hljs-string">"400"</span>&gt;</span><span class=3D"h=
ljs-tag">&lt;/<span class=3D"hljs-name">canvas</span>&gt;</span>
<span class=3D"hljs-tag">&lt;<span class=3D"hljs-name">script</span>&gt;</s=
pan><span class=3D"javascript">
<span class=3D"hljs-keyword">var</span> ctx =3D <span class=3D"hljs-built_i=
n">document</span>.getElementById(<span class=3D"hljs-string">"myChart"</sp=
an>);
<span class=3D"hljs-keyword">var</span> myChart =3D <span class=3D"hljs-key=
word">new</span> Chart(ctx, {
    type: <span class=3D"hljs-string">'bar'</span>,
    data: {
        labels: [<span class=3D"hljs-string">"Red"</span>, <span class=3D"h=
ljs-string">"Blue"</span>, <span class=3D"hljs-string">"Yellow"</span>, <sp=
an class=3D"hljs-string">"Green"</span>, <span class=3D"hljs-string">"Purpl=
e"</span>, <span class=3D"hljs-string">"Orange"</span>],
        datasets: [{
            label: <span class=3D"hljs-string">'# of Votes'</span>,
            data: [<span class=3D"hljs-number">12</span>, <span class=3D"hl=
js-number">19</span>, <span class=3D"hljs-number">3</span>, <span class=3D"=
hljs-number">5</span>, <span class=3D"hljs-number">2</span>, <span class=3D=
"hljs-number">3</span>],
            backgroundColor: [
                <span class=3D"hljs-string">'rgba(255, 99, 132, 0.2)'</span=
>,
                <span class=3D"hljs-string">'rgba(54, 162, 235, 0.2)'</span=
>,
                <span class=3D"hljs-string">'rgba(255, 206, 86, 0.2)'</span=
>,
                <span class=3D"hljs-string">'rgba(75, 192, 192, 0.2)'</span=
>,
                <span class=3D"hljs-string">'rgba(153, 102, 255, 0.2)'</spa=
n>,
                <span class=3D"hljs-string">'rgba(255, 159, 64, 0.2)'</span=
>
            ],
            borderColor: [
                <span class=3D"hljs-string">'rgba(255,99,132,1)'</span>,
                <span class=3D"hljs-string">'rgba(54, 162, 235, 1)'</span>,
                <span class=3D"hljs-string">'rgba(255, 206, 86, 1)'</span>,
                <span class=3D"hljs-string">'rgba(75, 192, 192, 1)'</span>,
                <span class=3D"hljs-string">'rgba(153, 102, 255, 1)'</span>=
,
                <span class=3D"hljs-string">'rgba(255, 159, 64, 1)'</span>
            ],
            borderWidth: <span class=3D"hljs-number">1</span>
        }]
    },
    options: {
        scales: {
            yAxes: [{
                ticks: {
                    beginAtZero:<span class=3D"hljs-literal">true</span>
                }
            }]
        }
    }
});
</span><span class=3D"hljs-tag">&lt;/<span class=3D"hljs-name">script</span=
>&gt;</span>
</code></pre>
<p>It's that easy to get started using Chart.js! From here you can explore =
the many options that can help you customise your charts with scales, toolt=
ips, labels, colors, custom actions, and much more.</p>

		</div>
	</section>

		=09
			=09
	<section id=3D"chart-configuration">
		<h2 class=3D"section-title">
			<a class=3D"fragment-link" href=3D"http://www.chartjs.org/docs/#chart-co=
nfiguration">Chart Configuration</a>
		</h2>
		<div class=3D"section-text">
			<p>Chart.js provides a number of options for changing the behaviour of c=
reated charts. These configuration options can be changed on a per chart ba=
sis by passing in an options object when creating the chart. Alternatively,=
 the global configuration can be changed which will be used by all charts c=
reated after that point.</p>
<h3 id=3D"chart-configuration-chart-data"><a class=3D"fragment-link" href=
=3D"http://www.chartjs.org/docs/#chart-configuration-chart-data">Chart Data=
</a></h3><p>To display data, the chart must be passed a data object that co=
ntains all of the information needed by the chart. The data object can cont=
ain the following parameters</p>
<div class=3D"table-wrapper"><table>
<thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>datasets</td>
<td>Array[object]</td>
<td>Contains data for each dataset. See the documentation for each chart ty=
pe to determine the valid options that can be attached to the dataset</td>
</tr>
<tr>
<td>labels</td>
<td>Array[string]</td>
<td>Optional parameter that is used with the <a href=3D"http://www.chartjs.=
org/docs/#scales-category-scale">category axis</a>.</td>
</tr>
<tr>
<td>xLabels</td>
<td>Array[string]</td>
<td>Optional parameter that is used with the category axis and is used if t=
he axis is horizontal</td>
</tr>
<tr>
<td>yLabels</td>
<td>Array[string]</td>
<td>Optional parameter that is used with the category axis and is used if t=
he axis is vertical</td>
</tr>
</tbody>
</table>
</div><h3 id=3D"chart-configuration-creating-a-chart-with-options"><a class=
=3D"fragment-link" href=3D"http://www.chartjs.org/docs/#chart-configuration=
-creating-a-chart-with-options">Creating a Chart with Options</a></h3><p>To=
 create a chart with configuration options, simply pass an object containin=
g your configuration to the constructor. In the example below, a line chart=
 is created and configured to not be responsive.</p>
<pre><code class=3D"lang-javascript"><span class=3D"hljs-keyword">var</span=
> chartInstance =3D <span class=3D"hljs-keyword">new</span> Chart(ctx, {
    type: <span class=3D"hljs-string">'line'</span>,
    data: data,
    options: {
        responsive: <span class=3D"hljs-literal">false</span>
    }
});
</code></pre>
<h3 id=3D"chart-configuration-global-configuration"><a class=3D"fragment-li=
nk" href=3D"http://www.chartjs.org/docs/#chart-configuration-global-configu=
ration">Global Configuration</a></h3><p>This concept was introduced in Char=
t.js 1.0 to keep configuration <a href=3D"https://en.wikipedia.org/wiki/Don=
%27t_repeat_yourself" target=3D"_blank">DRY</a>, and allow for changing opt=
ions globally across chart types, avoiding the need to specify options for =
each instance, or the default for a particular chart type.</p>
<p>Chart.js merges the options object passed to the chart with the global c=
onfiguration using chart type defaults and scales defaults appropriately. T=
his way you can be as specific as you would like in your individual chart c=
onfiguration, while still changing the defaults for all chart types where a=
pplicable. The global general options are defined in <code>Chart.defaults.g=
lobal</code>. The defaults for each chart type are discussed in the documen=
tation for that chart type.</p>
<p>The following example would set the hover mode to 'single' for all chart=
s where this was not overridden by the chart type defaults or the options p=
assed to the constructor on creation.</p>
<pre><code class=3D"lang-javascript">Chart.defaults.global.hover.mode =3D <=
span class=3D"hljs-string">'single'</span>;

<span class=3D"hljs-comment">// Hover mode is set to single because it was =
not overridden here</span>
<span class=3D"hljs-keyword">var</span> chartInstanceHoverModeSingle =3D <s=
pan class=3D"hljs-keyword">new</span> Chart(ctx, {
    type: <span class=3D"hljs-string">'line'</span>,
    data: data,
});

<span class=3D"hljs-comment">// This chart would have the hover mode that w=
as passed in</span>
<span class=3D"hljs-keyword">var</span> chartInstanceDifferentHoverMode =3D=
 <span class=3D"hljs-keyword">new</span> Chart(ctx, {
    type: <span class=3D"hljs-string">'line'</span>,
    data: data,
    options: {
        hover: {
            <span class=3D"hljs-comment">// Overrides the global setting</s=
pan>
            mode: <span class=3D"hljs-string">'label'</span>
        }
    }
})
</code></pre>
<h4>Global Font Settings</h4><p>There are 4 special global settings that ca=
n change all of the fonts on the chart. These options are in <code>Chart.de=
faults.global</code>.</p>
<div class=3D"table-wrapper"><table>
<thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>defaultFontColor</td>
<td>Color</td>
<td>'#666'</td>
<td>Default font color for all text</td>
</tr>
<tr>
<td>defaultFontFamily</td>
<td>String</td>
<td>"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif"</td>
<td>Default font family for all text</td>
</tr>
<tr>
<td>defaultFontSize</td>
<td>Number</td>
<td>12</td>
<td>Default font size (in px) for text. Does not apply to radialLinear scal=
e point labels</td>
</tr>
<tr>
<td>defaultFontStyle</td>
<td>String</td>
<td>'normal'</td>
<td>Default font style. Does not apply to tooltip title or footer. Does not=
 apply to chart title</td>
</tr>
</tbody>
</table>
</div><h3 id=3D"chart-configuration-common-chart-configuration"><a class=3D=
"fragment-link" href=3D"http://www.chartjs.org/docs/#chart-configuration-co=
mmon-chart-configuration">Common Chart Configuration</a></h3><p>The followi=
ng options are applicable to all charts. The can be set on the <a href=3D"h=
ttp://www.chartjs.org/docs/#chart-configuration-global-configuration">globa=
l configuration</a>, or they can be passed to the chart constructor.</p>
<div class=3D"table-wrapper"><table>
<thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>responsive</td>
<td>Boolean</td>
<td>true</td>
<td>Resizes when the canvas container does.</td>
</tr>
<tr>
<td>responsiveAnimationDuration</td>
<td>Number</td>
<td>0</td>
<td>Duration in milliseconds it takes to animate to new size after a resize=
 event.</td>
</tr>
<tr>
<td>maintainAspectRatio</td>
<td>Boolean</td>
<td>true</td>
<td>Maintain the original canvas aspect ratio <code>(width / height)</code>=
 when resizing</td>
</tr>
<tr>
<td>events</td>
<td>Array[String]</td>
<td><code>["mousemove", "mouseout", "click", "touchstart", "touchmove", "to=
uchend"]</code></td>
<td>Events that the chart should listen to for tooltips and hovering</td>
</tr>
<tr>
<td>onClick</td>
<td>Function</td>
<td>null</td>
<td>Called if the event is of type 'mouseup' or 'click'. Called in the cont=
ext of the chart and passed an array of active elements</td>
</tr>
<tr>
<td>legendCallback</td>
<td>Function</td>
<td><code>function (chart) { }</code></td>
<td>Function to generate a legend. Receives the chart object to generate a =
legend from. Default implementation returns an HTML string.</td>
</tr>
<tr>
<td>onResize</td>
<td>Function</td>
<td>null</td>
<td>Called when a resize occurs. Gets passed two arguemnts: the chart insta=
nce and the new size.</td>
</tr>
</tbody>
</table>
</div><h3 id=3D"chart-configuration-title-configuration"><a class=3D"fragme=
nt-link" href=3D"http://www.chartjs.org/docs/#chart-configuration-title-con=
figuration">Title Configuration</a></h3><p>The title configuration is passe=
d into the <code>options.title</code> namespace. The global options for the=
 chart title is defined in <code>Chart.defaults.global.title</code>.</p>
<div class=3D"table-wrapper"><table>
<thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>display</td>
<td>Boolean</td>
<td>false</td>
<td>Display the title block</td>
</tr>
<tr>
<td>position</td>
<td>String</td>
<td>'top'</td>
<td>Position of the title. Only 'top' or 'bottom' are currently allowed</td=
>
</tr>
<tr>
<td>fullWidth</td>
<td>Boolean</td>
<td>true</td>
<td>Marks that this box should take the full width of the canvas (pushing d=
own other boxes)</td>
</tr>
<tr>
<td>fontSize</td>
<td>Number</td>
<td>12</td>
<td>Font size inherited from global configuration</td>
</tr>
<tr>
<td>fontFamily</td>
<td>String</td>
<td>"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif"</td>
<td>Font family inherited from global configuration</td>
</tr>
<tr>
<td>fontColor</td>
<td>Color</td>
<td>"#666"</td>
<td>Font color inherited from global configuration</td>
</tr>
<tr>
<td>fontStyle</td>
<td>String</td>
<td>'bold'</td>
<td>Font styling of the title.</td>
</tr>
<tr>
<td>padding</td>
<td>Number</td>
<td>10</td>
<td>Number of pixels to add above and below the title text</td>
</tr>
<tr>
<td>text</td>
<td>String</td>
<td>''</td>
<td>Title text</td>
</tr>
</tbody>
</table>
</div><h4>Example Usage</h4><p>The example below would enable a title of 'C=
ustom Chart Title' on the chart that is created.</p>
<pre><code class=3D"lang-javascript"><span class=3D"hljs-keyword">var</span=
> chartInstance =3D <span class=3D"hljs-keyword">new</span> Chart(ctx, {
    type: <span class=3D"hljs-string">'line'</span>,
    data: data,
    options: {
        title: {
            display: <span class=3D"hljs-literal">true</span>,
            text: <span class=3D"hljs-string">'Custom Chart Title'</span>
        }
    }
})
</code></pre>
<h3 id=3D"chart-configuration-legend-configuration"><a class=3D"fragment-li=
nk" href=3D"http://www.chartjs.org/docs/#chart-configuration-legend-configu=
ration">Legend Configuration</a></h3><p>The legend configuration is passed =
into the <code>options.legend</code> namespace. The global options for the =
chart legend is defined in <code>Chart.defaults.global.legend</code>.</p>
<div class=3D"table-wrapper"><table>
<thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>display</td>
<td>Boolean</td>
<td>true</td>
<td>Is the legend displayed</td>
</tr>
<tr>
<td>position</td>
<td>String</td>
<td>'top'</td>
<td>Position of the legend. Options are 'top' or 'bottom'</td>
</tr>
<tr>
<td>fullWidth</td>
<td>Boolean</td>
<td>true</td>
<td>Marks that this box should take the full width of the canvas (pushing d=
own other boxes)</td>
</tr>
<tr>
<td>onClick</td>
<td>Function</td>
<td><code>function(event, legendItem) {}</code></td>
<td>A callback that is called when a click is registered on top of a label =
item</td>
</tr>
<tr>
<td>labels</td>
<td>Object</td>
<td>-</td>
<td>See the <a href=3D"http://www.chartjs.org/docs/#chart-configuration-leg=
end-label-configuration">Legend Label Configuration</a> section below.</td>
</tr>
</tbody>
</table>
</div><h4>Legend Label Configuration</h4><p>The legend label configuration =
is nested below the legend configuration using the <code>labels</code> key.=
</p>
<div class=3D"table-wrapper"><table>
<thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>boxWidth</td>
<td>Number</td>
<td>40</td>
<td>Width of coloured box</td>
</tr>
<tr>
<td>fontSize</td>
<td>Number</td>
<td>12</td>
<td>Font size inherited from global configuration</td>
</tr>
<tr>
<td>fontStyle</td>
<td>String</td>
<td>"normal"</td>
<td>Font style inherited from global configuration</td>
</tr>
<tr>
<td>fontColor</td>
<td>Color</td>
<td>"#666"</td>
<td>Font color inherited from global configuration</td>
</tr>
<tr>
<td>fontFamily</td>
<td>String</td>
<td>"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif"</td>
<td>Font family inherited from global configuration</td>
</tr>
<tr>
<td>padding</td>
<td>Number</td>
<td>10</td>
<td>Padding between rows of colored boxes</td>
</tr>
<tr>
<td>generateLabels:</td>
<td>Function</td>
<td><code>function(chart) {  }</code></td>
<td>Generates legend items for each thing in the legend. Default implementa=
tion returns the text + styling for the color box. See <a href=3D"http://ww=
w.chartjs.org/docs/#chart-configuration-legend-item-interface">Legend Item<=
/a> for details.</td>
</tr>
<tr>
<td>usePointStyle</td>
<td>Boolean</td>
<td>false</td>
<td>Label style will match corresponding point style (size is based on font=
Size, boxWidth is not used in this case).</td>
</tr>
</tbody>
</table>
</div><h4>Legend Item Interface</h4><p>Items passed to the legend <code>onC=
lick</code> function are the ones returned from <code>labels.generateLabels=
</code>. These items must implement the following interface.</p>
<pre><code class=3D"lang-javascript">{
    <span class=3D"hljs-comment">// Label that will be displayed</span>
    text: <span class=3D"hljs-built_in">String</span>,

    <span class=3D"hljs-comment">// Fill style of the legend box</span>
    fillStyle: Color,

    <span class=3D"hljs-comment">// If true, this item represents a hidden =
dataset. Label will be rendered with a strike-through effect</span>
    hidden: <span class=3D"hljs-built_in">Boolean</span>,

    <span class=3D"hljs-comment">// For box border. See https://developer.m=
ozilla.org/en/docs/Web/API/CanvasRenderingContext2D/lineCap</span>
    lineCap: <span class=3D"hljs-built_in">String</span>,

    <span class=3D"hljs-comment">// For box border. See https://developer.m=
ozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/setLineDash</span>
    lineDash: <span class=3D"hljs-built_in">Array</span>[<span class=3D"hlj=
s-built_in">Number</span>],

    <span class=3D"hljs-comment">// For box border. See https://developer.m=
ozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset</span=
>
    lineDashOffset: <span class=3D"hljs-built_in">Number</span>,

    <span class=3D"hljs-comment">// For box border. See https://developer.m=
ozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineJoin</span>
    lineJoin: <span class=3D"hljs-built_in">String</span>,

    <span class=3D"hljs-comment">// Width of box border</span>
    lineWidth: <span class=3D"hljs-built_in">Number</span>,

    <span class=3D"hljs-comment">// Stroke style of the legend box</span>
    strokeStyle: Color

    <span class=3D"hljs-comment">// Point style of the legend box (only use=
d if usePointStyle is true)</span>
    pointStyle: <span class=3D"hljs-built_in">String</span>
}
</code></pre>
<h4>Example</h4><p>The following example will create a chart with the legen=
d enabled and turn all of the text red in color.</p>
<pre><code class=3D"lang-javascript"><span class=3D"hljs-keyword">var</span=
> chartInstance =3D <span class=3D"hljs-keyword">new</span> Chart(ctx, {
    type: <span class=3D"hljs-string">'bar'</span>,
    data: data,
    options: {
        legend: {
            display: <span class=3D"hljs-literal">true</span>,
            labels: {
                fontColor: <span class=3D"hljs-string">'rgb(255, 99, 132)'<=
/span>
            }
        }
    }
});
</code></pre>
<h3 id=3D"chart-configuration-tooltip-configuration"><a class=3D"fragment-l=
ink" href=3D"http://www.chartjs.org/docs/#chart-configuration-tooltip-confi=
guration">Tooltip Configuration</a></h3><p>The tooltip configuration is pas=
sed into the <code>options.tooltips</code> namespace. The global options fo=
r the chart tooltips is defined in <code>Chart.defaults.global.tooltips</co=
de>.</p>
<div class=3D"table-wrapper"><table>
<thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>enabled</td>
<td>Boolean</td>
<td>true</td>
<td>Are tooltips enabled</td>
</tr>
<tr>
<td>custom</td>
<td>Function</td>
<td>null</td>
<td>See <a href=3D"http://www.chartjs.org/docs/#chart-configuration-custom-=
tooltips">section</a> below</td>
</tr>
<tr>
<td>mode</td>
<td>String</td>
<td>'single'</td>
<td>Sets which elements appear in the tooltip. Acceptable options are <code=
>'single'</code>, <code>'label'</code> or <code>'x-axis'</code>. <br>&nbsp;=
<br><code>single</code> highlights the closest element. <br>&nbsp;<br><code=
>label</code> highlights elements in all datasets at the same <code>X</code=
> value. <br>&nbsp;<br><code>'x-axis'</code> also highlights elements in al=
l datasets at the same <code>X</code> value, but activates when hovering an=
ywhere within the vertical slice of the x-axis representing that <code>X</c=
ode> value.</td>
</tr>
<tr>
<td>itemSort</td>
<td>Function</td>
<td>undefined</td>
<td>Allows sorting of <a href=3D"http://www.chartjs.org/docs/#chart-configu=
ration-tooltip-item-interface">tooltip items</a>. Must implement a function=
 that can be passed to <a href=3D"https://developer.mozilla.org/en-US/docs/=
Web/JavaScript/Reference/Global_Objects/Array/sort" target=3D"_blank">Array=
.prototype.sort</a></td>
</tr>
<tr>
<td>backgroundColor</td>
<td>Color</td>
<td>'rgba(0,0,0,0.8)'</td>
<td>Background color of the tooltip</td>
</tr>
<tr>
<td>titleFontFamily</td>
<td>String</td>
<td>"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif"</td>
<td>Font family for tooltip title inherited from global font family</td>
</tr>
<tr>
<td>titleFontSize</td>
<td>Number</td>
<td>12</td>
<td>Font size for tooltip title inherited from global font size</td>
</tr>
<tr>
<td>titleFontStyle</td>
<td>String</td>
<td>"bold"</td>
<td></td>
</tr>
<tr>
<td>titleFontColor</td>
<td>Color</td>
<td>"#fff"</td>
<td>Font color for tooltip title</td>
</tr>
<tr>
<td>titleSpacing</td>
<td>Number</td>
<td>2</td>
<td>Spacing to add to top and bottom of each title line.</td>
</tr>
<tr>
<td>titleMarginBottom</td>
<td>Number</td>
<td>6</td>
<td>Margin to add on bottom of title section</td>
</tr>
<tr>
<td>bodyFontFamily</td>
<td>String</td>
<td>"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif"</td>
<td>Font family for tooltip items inherited from global font family</td>
</tr>
<tr>
<td>bodyFontSize</td>
<td>Number</td>
<td>12</td>
<td>Font size for tooltip items inherited from global font size</td>
</tr>
<tr>
<td>bodyFontStyle</td>
<td>String</td>
<td>"normal"</td>
<td></td>
</tr>
<tr>
<td>bodyFontColor</td>
<td>Color</td>
<td>"#fff"</td>
<td>Font color for tooltip items.</td>
</tr>
<tr>
<td>bodySpacing</td>
<td>Number</td>
<td>2</td>
<td>Spacing to add to top and bottom of each tooltip item</td>
</tr>
<tr>
<td>footerFontFamily</td>
<td>String</td>
<td>"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif"</td>
<td>Font family for tooltip footer inherited from global font family.</td>
</tr>
<tr>
<td>footerFontSize</td>
<td>Number</td>
<td>12</td>
<td>Font size for tooltip footer inherited from global font size.</td>
</tr>
<tr>
<td>footerFontStyle</td>
<td>String</td>
<td>"bold"</td>
<td>Font style for tooltip footer.</td>
</tr>
<tr>
<td>footerFontColor</td>
<td>Color</td>
<td>"#fff"</td>
<td>Font color for tooltip footer.</td>
</tr>
<tr>
<td>footerSpacing</td>
<td>Number</td>
<td>2</td>
<td>Spacing to add to top and bottom of each footer line.</td>
</tr>
<tr>
<td>footerMarginTop</td>
<td>Number</td>
<td>6</td>
<td>Margin to add before drawing the footer</td>
</tr>
<tr>
<td>xPadding</td>
<td>Number</td>
<td>6</td>
<td>Padding to add on left and right of tooltip</td>
</tr>
<tr>
<td>yPadding</td>
<td>Number</td>
<td>6</td>
<td>Padding to add on top and bottom of tooltip</td>
</tr>
<tr>
<td>caretSize</td>
<td>Number</td>
<td>5</td>
<td>Size, in px, of the tooltip arrow</td>
</tr>
<tr>
<td>cornerRadius</td>
<td>Number</td>
<td>6</td>
<td>Radius of tooltip corner curves</td>
</tr>
<tr>
<td>multiKeyBackground</td>
<td>Color</td>
<td>"#fff"</td>
<td>Color to draw behind the colored boxes when multiple items are in the t=
ooltip</td>
</tr>
<tr>
<td>callbacks</td>
<td>Object</td>
<td></td>
<td>See the <a href=3D"http://www.chartjs.org/docs/#chart-configuration-too=
ltip-callbacks">callbacks section</a> below</td>
</tr>
</tbody>
</table>
</div><h4>Tooltip Callbacks</h4><p>The tooltip label configuration is neste=
d below the tooltip configuration using the <code>callbacks</code> key. The=
 tooltip has the following callbacks for providing text. For all functions,=
 'this' will be the tooltip object created from the Chart.Tooltip construct=
or.</p>
<p>All functions are called with the same arguments: a <a href=3D"http://ww=
w.chartjs.org/docs/#chart-configuration-tooltip-item-interface">tooltip ite=
m</a> and the data object passed to the chart. All functions must return ei=
ther a string or an array of strings. Arrays of strings are treated as mult=
iple lines of text.</p>
<div class=3D"table-wrapper"><table>
<thead>
<tr>
<th>Callback</th>
<th>Arguments</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>beforeTitle</td>
<td><code>Array[tooltipItem], data</code></td>
<td>Text to render before the title</td>
</tr>
<tr>
<td>title</td>
<td><code>Array[tooltipItem], data</code></td>
<td>Text to render as the title</td>
</tr>
<tr>
<td>afterTitle</td>
<td><code>Array[tooltipItem], data</code></td>
<td>Text to render after the title</td>
</tr>
<tr>
<td>beforeBody</td>
<td><code>Array[tooltipItem], data</code></td>
<td>Text to render before the body section</td>
</tr>
<tr>
<td>beforeLabel</td>
<td><code>tooltipItem, data</code></td>
<td>Text to render before an individual label</td>
</tr>
<tr>
<td>label</td>
<td><code>tooltipItem, data</code></td>
<td>Text to render for an individual item in the tooltip</td>
</tr>
<tr>
<td>labelColor</td>
<td><code>tooltipItem, chartInstace</code></td>
<td>Returns the colors to render for the tooltip item. Return as an object =
containing two parameters: <code>borderColor</code> and <code>backgroundCol=
or</code>.</td>
</tr>
<tr>
<td>afterLabel</td>
<td><code>tooltipItem, data</code></td>
<td>Text to render after an individual label</td>
</tr>
<tr>
<td>afterBody</td>
<td><code>Array[tooltipItem], data</code></td>
<td>Text to render after the body section</td>
</tr>
<tr>
<td>beforeFooter</td>
<td><code>Array[tooltipItem], data</code></td>
<td>Text to render before the footer section</td>
</tr>
<tr>
<td>footer</td>
<td><code>Array[tooltipItem], data</code></td>
<td>Text to render as the footer</td>
</tr>
<tr>
<td>afterFooter</td>
<td><code>Array[tooltipItem], data</code></td>
<td>Text to render after the footer section</td>
</tr>
</tbody>
</table>
</div><h4>Tooltip Item Interface</h4><p>The tooltip items passed to the too=
ltip callbacks implement the following interface.</p>
<pre><code class=3D"lang-javascript">{
    <span class=3D"hljs-comment">// X Value of the tooltip as a string</spa=
n>
    xLabel: <span class=3D"hljs-built_in">String</span>,

    <span class=3D"hljs-comment">// Y value of the tooltip as a string</spa=
n>
    yLabel: <span class=3D"hljs-built_in">String</span>,

    <span class=3D"hljs-comment">// Index of the dataset the item comes fro=
m</span>
    datasetIndex: <span class=3D"hljs-built_in">Number</span>,

    <span class=3D"hljs-comment">// Index of this data item in the dataset<=
/span>
    index: <span class=3D"hljs-built_in">Number</span>
}
</code></pre>
<h3 id=3D"chart-configuration-hover-configuration"><a class=3D"fragment-lin=
k" href=3D"http://www.chartjs.org/docs/#chart-configuration-hover-configura=
tion">Hover Configuration</a></h3><p>The hover configuration is passed into=
 the <code>options.hover</code> namespace. The global hover configuration i=
s at <code>Chart.defaults.global.hover</code>.</p>
<div class=3D"table-wrapper"><table>
<thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>mode</td>
<td>String</td>
<td>'single'</td>
<td>Sets which elements hover. Acceptable options are <code>'single'</code>=
, <code>'label'</code>, <code>'x-axis'</code>, or <code>'dataset'</code>. <=
br>&nbsp;<br><code>single</code> highlights the closest element. <br>&nbsp;=
<br><code>label</code> highlights elements in all datasets at the same <cod=
e>X</code> value. <br>&nbsp;<br><code>'x-axis'</code> also highlights eleme=
nts in all datasets at the same <code>X</code> value, but activates when ho=
vering anywhere within the vertical slice of the x-axis representing that <=
code>X</code> value.  <br>&nbsp;<br><code>dataset</code> highlights the clo=
sest dataset.</td>
</tr>
<tr>
<td>animationDuration</td>
<td>Number</td>
<td>400</td>
<td>Duration in milliseconds it takes to animate hover style changes</td>
</tr>
<tr>
<td>onHover</td>
<td>Function</td>
<td>null</td>
<td>Called when any of the events fire. Called in the context of the chart =
and passed an array of active elements (bars, points, etc)</td>
</tr>
</tbody>
</table>
</div><h3 id=3D"chart-configuration-animation-configuration"><a class=3D"fr=
agment-link" href=3D"http://www.chartjs.org/docs/#chart-configuration-anima=
tion-configuration">Animation Configuration</a></h3><p>The following animat=
ion options are available. The global options for are defined in <code>Char=
t.defaults.global.animation</code>.</p>
<div class=3D"table-wrapper"><table>
<thead>
<tr>
<th>Name</th>
<th style=3D"text-align:center">Type</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>duration</td>
<td style=3D"text-align:center">Number</td>
<td>1000</td>
<td>The number of milliseconds an animation takes.</td>
</tr>
<tr>
<td>easing</td>
<td style=3D"text-align:center">String</td>
<td>"easeOutQuart"</td>
<td>Easing function to use.</td>
</tr>
<tr>
<td>onProgress</td>
<td style=3D"text-align:center">Function</td>
<td>none</td>
<td>Callback called on each step of an animation. Passed a single argument,=
 an object, containing the chart instance and an object with details of the=
 animation.</td>
</tr>
<tr>
<td>onComplete</td>
<td style=3D"text-align:center">Function</td>
<td>none</td>
<td>Callback called at the end of an animation. Passed the same arguments a=
s <code>onProgress</code></td>
</tr>
</tbody>
</table>
</div><h4>Animation Callbacks</h4><p>The <code>onProgress</code> and <code>=
onComplete</code> callbacks are useful for synchronizing an external draw t=
o the chart animation. The callback is passed an object that implements the=
 following interface. An example usage of these callbacks can be found on <=
a href=3D"https://github.com/chartjs/Chart.js/blob/master/samples/Animation=
Callbacks/progress-bar.html" target=3D"_blank">Github</a>. This sample disp=
lays a progress bar showing how far along the animation is.</p>
<pre><code class=3D"lang-javscript">{
    // Chart object
    chartInstance,

    // Contains details of the on-going animation
    animationObject,
}
</code></pre>
<h4>Animation Object</h4><p>The animation object passed to the callbacks is=
 of type <code>Chart.Animation</code>. The object has the following paramet=
ers.</p>
<pre><code class=3D"lang-javascript">{
    <span class=3D"hljs-comment">// Current Animation frame number</span>
    currentStep: <span class=3D"hljs-built_in">Number</span>,

    <span class=3D"hljs-comment">// Number of animation frames</span>
    numSteps: <span class=3D"hljs-built_in">Number</span>,

    <span class=3D"hljs-comment">// Animation easing to use</span>
    easing: <span class=3D"hljs-built_in">String</span>,

    <span class=3D"hljs-comment">// Function that renders the chart</span>
    render: <span class=3D"hljs-built_in">Function</span>,

    <span class=3D"hljs-comment">// User callback</span>
    onAnimationProgress: <span class=3D"hljs-built_in">Function</span>,

    <span class=3D"hljs-comment">// User callback</span>
    onAnimationComplete: <span class=3D"hljs-built_in">Function</span>
}
</code></pre>
<h3 id=3D"chart-configuration-element-configuration"><a class=3D"fragment-l=
ink" href=3D"http://www.chartjs.org/docs/#chart-configuration-element-confi=
guration">Element Configuration</a></h3><p>The global options for elements =
are defined in <code>Chart.defaults.global.elements</code>.</p>
<p>Options can be configured for four different types of elements; arc, lin=
es, points, and rectangles. When set, these options apply to all objects of=
 that type unless specifically overridden by the configuration attached to =
a dataset.</p>
<h4>Arc Configuration</h4><p>Arcs are used in the polar area, doughnut and =
pie charts. They can be configured with the following options. The global a=
rc options are stored in <code>Chart.defaults.global.elements.arc</code>.</=
p>
<div class=3D"table-wrapper"><table>
<thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>backgroundColor</td>
<td>Color</td>
<td>'rgba(0,0,0,0.1)'</td>
<td>Default fill color for arcs. Inherited from the global default</td>
</tr>
<tr>
<td>borderColor</td>
<td>Color</td>
<td>'#fff'</td>
<td>Default stroke color for arcs</td>
</tr>
<tr>
<td>borderWidth</td>
<td>Number</td>
<td>2</td>
<td>Default stroke width for arcs</td>
</tr>
</tbody>
</table>
</div><h4>Line Configuration</h4><p>Line elements are used to represent the=
 line in a line chart. The global line options are stored in <code>Chart.de=
faults.global.elements.line</code>.</p>
<div class=3D"table-wrapper"><table>
<thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>tension</td>
<td>Number</td>
<td>0.4</td>
<td>Default bezier curve tension. Set to <code>0</code> for no bezier curve=
s.</td>
</tr>
<tr>
<td>backgroundColor</td>
<td>Color</td>
<td>'rgba(0,0,0,0.1)'</td>
<td>Default line fill color</td>
</tr>
<tr>
<td>borderWidth</td>
<td>Number</td>
<td>3</td>
<td>Default line stroke width</td>
</tr>
<tr>
<td>borderColor</td>
<td>Color</td>
<td>'rgba(0,0,0,0.1)'</td>
<td>Default line stroke color</td>
</tr>
<tr>
<td>borderCapStyle</td>
<td>String</td>
<td>'butt'</td>
<td>Default line cap style. See <a href=3D"https://developer.mozilla.org/en=
/docs/Web/API/CanvasRenderingContext2D/lineCap" target=3D"_blank">MDN</a></=
td>
</tr>
<tr>
<td>borderDash</td>
<td>Array</td>
<td><code>[]</code></td>
<td>Default line dash. See <a href=3D"https://developer.mozilla.org/en-US/d=
ocs/Web/API/CanvasRenderingContext2D/setLineDash" target=3D"_blank">MDN</a>=
</td>
</tr>
<tr>
<td>borderDashOffset</td>
<td>Number</td>
<td>0.0</td>
<td>Default line dash offset. See <a href=3D"https://developer.mozilla.org/=
en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset" target=3D"_blan=
k">MDN</a></td>
</tr>
<tr>
<td>borderJoinStyle</td>
<td>String</td>
<td>'miter'</td>
<td>Default line join style. See <a href=3D"https://developer.mozilla.org/e=
n-US/docs/Web/API/CanvasRenderingContext2D/lineJoin" target=3D"_blank">MDN<=
/a></td>
</tr>
<tr>
<td>capBezierPoints</td>
<td>Boolean</td>
<td>true</td>
<td>If true, bezier control points are kept inside the chart. If false, no =
restriction is enforced.</td>
</tr>
<tr>
<td>fill</td>
<td>Boolean</td>
<td>true</td>
<td>If true, the line is filled.</td>
</tr>
<tr>
<td>stepped</td>
<td>Boolean</td>
<td>false</td>
<td>If true, the line is shown as a steeped line and 'tension' will be igno=
red</td>
</tr>
</tbody>
</table>
</div><h4>Point Configuration</h4><p>Point elements are used to represent t=
he points in a line chart or a bubble chart. The global point options are s=
tored in <code>Chart.defaults.global.elements.point</code>.</p>
<div class=3D"table-wrapper"><table>
<thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>radius</td>
<td>Number</td>
<td>3</td>
<td>Default point radius</td>
</tr>
<tr>
<td>pointStyle</td>
<td>String</td>
<td>'circle'</td>
<td>Default point style</td>
</tr>
<tr>
<td>backgroundColor</td>
<td>Color</td>
<td>'rgba(0,0,0,0.1)'</td>
<td>Default point fill color</td>
</tr>
<tr>
<td>borderWidth</td>
<td>Number</td>
<td>1</td>
<td>Default point stroke width</td>
</tr>
<tr>
<td>borderColor</td>
<td>Color</td>
<td>'rgba(0,0,0,0.1)'</td>
<td>Default point stroke color</td>
</tr>
<tr>
<td>hitRadius</td>
<td>Number</td>
<td>1</td>
<td>Extra radius added to point radius for hit detection</td>
</tr>
<tr>
<td>hoverRadius</td>
<td>Number</td>
<td>4</td>
<td>Default point radius when hovered</td>
</tr>
<tr>
<td>hoverBorderWidth</td>
<td>Number</td>
<td>1</td>
<td>Default stroke width when hovered</td>
</tr>
</tbody>
</table>
</div><h4>Rectangle Configuration</h4><p>Rectangle elements are used to rep=
resent the bars in a bar chart. The global rectangle options are stored in =
<code>Chart.defaults.global.elements.rectangle</code>.</p>
<div class=3D"table-wrapper"><table>
<thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>backgroundColor</td>
<td>Color</td>
<td>'rgba(0,0,0,0.1)'</td>
<td>Default bar fill color</td>
</tr>
<tr>
<td>borderWidth</td>
<td>Number</td>
<td>0</td>
<td>Default bar stroke width</td>
</tr>
<tr>
<td>borderColor</td>
<td>Color</td>
<td>'rgba(0,0,0,0.1)'</td>
<td>Default bar stroke color</td>
</tr>
<tr>
<td>borderSkipped</td>
<td>String</td>
<td>'bottom'</td>
<td>Default skipped (excluded) border for rectangle. Can be one of <code>bo=
ttom</code>, <code>left</code>, <code>top</code>, <code>right</code></td>
</tr>
</tbody>
</table>
</div><h3 id=3D"chart-configuration-colors"><a class=3D"fragment-link" href=
=3D"http://www.chartjs.org/docs/#chart-configuration-colors">Colors</a></h3=
><p>When supplying colors to Chart options, you can use a number of formats=
. You can specify the color as a string in hexadecimal, RGB, or HSL notatio=
ns. If a color is needed, but not specified, Chart.js will use the global d=
efault color. This color is stored at <code>Chart.defaults.global.defaultCo=
lor</code>. It is initially set to 'rgb(0, 0, 0, 0.1)';</p>
<p>You can also pass a <a href=3D"https://developer.mozilla.org/en-US/docs/=
Web/API/CanvasGradient" target=3D"_blank">CanvasGradient</a> object. You wi=
ll need to create this before passing to the chart, but using it you can ac=
hieve some interesting effects.</p>
<p>The final option is to pass a <a href=3D"https://developer.mozilla.org/e=
n-US/docs/Web/API/CanvasPattern" target=3D"_blank">CanvasPattern</a> object=
. For example, if you wanted to fill a dataset with a pattern from an image=
 you could do the following.</p>
<pre><code class=3D"lang-javascript"><span class=3D"hljs-keyword">var</span=
> img =3D <span class=3D"hljs-keyword">new</span> Image();
img.src =3D <span class=3D"hljs-string">'https://example.com/my_image.png'<=
/span>;
img.onload =3D <span class=3D"hljs-function"><span class=3D"hljs-keyword">f=
unction</span>(<span class=3D"hljs-params"></span>) </span>{
    <span class=3D"hljs-keyword">var</span> ctx =3D <span class=3D"hljs-bui=
lt_in">document</span>.getElementById(<span class=3D"hljs-string">'canvas'<=
/span>).getContext(<span class=3D"hljs-string">'2d'</span>);
    <span class=3D"hljs-keyword">var</span> fillPattern =3D ctx.createPatte=
rn(img, <span class=3D"hljs-string">'repeat'</span>);

    <span class=3D"hljs-keyword">var</span> chart =3D <span class=3D"hljs-k=
eyword">new</span> Chart(ctx, {
        data: {
            labels: [<span class=3D"hljs-string">'Item 1'</span>, <span cla=
ss=3D"hljs-string">'Item 2'</span>, <span class=3D"hljs-string">'Item 3'</s=
pan>],
            datasets: [{
                data: [<span class=3D"hljs-number">10</span>, <span class=
=3D"hljs-number">20</span>, <span class=3D"hljs-number">30</span>],
                backgroundColor: fillPattern
            }]
        }
    })
}
</code></pre>

		</div>
	</section>

		=09
			=09
	<section id=3D"line-chart">
		<h2 class=3D"section-title">
			<a class=3D"fragment-link" href=3D"http://www.chartjs.org/docs/#line-cha=
rt">Line Chart</a>
		</h2>
		<div class=3D"section-text">
			<h3 id=3D"line-chart-introduction"><a class=3D"fragment-link" href=3D"ht=
tp://www.chartjs.org/docs/#line-chart-introduction">Introduction</a></h3><p=
>A line chart is a way of plotting data points on a line. Often, it is used=
 to show trend data, and the comparison of two data sets.</p>
<div class=3D"canvas-holder"><iframe class=3D"chartjs-hidden-iframe" style=
=3D"width: 100%; display: block; border: 0px; height: 0px; margin: 0px; pos=
ition: absolute; left: 0px; right: 0px; top: 0px; bottom: 0px;" src=3D"wyci=
wyg://frame/0"></iframe>
    <canvas width=3D"1860" height=3D"930" style=3D"display: block; width: 6=
20px; height: 310px;"></canvas>
</div>

<h3 id=3D"line-chart-example-usage"><a class=3D"fragment-link" href=3D"http=
://www.chartjs.org/docs/#line-chart-example-usage">Example Usage</a></h3><p=
re><code class=3D"lang-javascript"><span class=3D"hljs-keyword">var</span> =
myLineChart =3D <span class=3D"hljs-keyword">new</span> Chart(ctx, {
    type: <span class=3D"hljs-string">'line'</span>,
    data: data,
    options: options
});
</code></pre>
<p>Alternatively a line chart can be created using syntax similar to the v1=
.0 syntax</p>
<pre><code class=3D"lang-javascript"><span class=3D"hljs-keyword">var</span=
> myLineChart =3D Chart.Line(ctx, {
    data: data,
    options: options
});
</code></pre>
<h3 id=3D"line-chart-data-structure"><a class=3D"fragment-link" href=3D"htt=
p://www.chartjs.org/docs/#line-chart-data-structure">Data Structure</a></h3=
><p>The following options can be included in a line chart dataset to config=
ure options for that specific dataset.</p>
<p>All point* properties can be specified as an array. If these are set to =
an array value, the first value applies to the first point, the second valu=
e to the second point, and so on.</p>
<div class=3D"table-wrapper"><table>
<thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Usage</th>
</tr>
</thead>
<tbody>
<tr>
<td>data</td>
<td>See <a href=3D"http://www.chartjs.org/docs/#line-chart-data-points">dat=
a point</a> section</td>
<td>The data to plot in a line</td>
</tr>
<tr>
<td>label</td>
<td><code>String</code></td>
<td>The label for the dataset which appears in the legend and tooltips</td>
</tr>
<tr>
<td>xAxisID</td>
<td><code>String</code></td>
<td>The ID of the x axis to plot this dataset on</td>
</tr>
<tr>
<td>yAxisID</td>
<td><code>String</code></td>
<td>The ID of the y axis to plot this dataset on</td>
</tr>
<tr>
<td>fill</td>
<td><code>Boolean</code></td>
<td>If true, fill the area under the line</td>
</tr>
<tr>
<td>lineTension</td>
<td><code>Number</code></td>
<td>Bezier curve tension of the line. Set to 0 to draw straightlines. <em>N=
ote</em> This was renamed from 'tension' but the old name still works.</td>
</tr>
<tr>
<td>backgroundColor</td>
<td><code>Color</code></td>
<td>The fill color under the line. See <a href=3D"http://www.chartjs.org/do=
cs/#chart-configuration-colors">Colors</a></td>
</tr>
<tr>
<td>borderWidth</td>
<td><code>Number</code></td>
<td>The width of the line in pixels</td>
</tr>
<tr>
<td>borderColor</td>
<td><code>Color</code></td>
<td>The color of the line.</td>
</tr>
<tr>
<td>borderCapStyle</td>
<td><code>String</code></td>
<td>Cap style of the line. See <a href=3D"https://developer.mozilla.org/en-=
US/docs/Web/API/CanvasRenderingContext2D/lineCap" target=3D"_blank">MDN</a>=
</td>
</tr>
<tr>
<td>borderDash</td>
<td><code>Array&lt;Number&gt;</code></td>
<td>Length and spacing of dashes. See <a href=3D"https://developer.mozilla.=
org/en-US/docs/Web/API/CanvasRenderingContext2D/setLineDash" target=3D"_bla=
nk">MDN</a></td>
</tr>
<tr>
<td>borderDashOffset</td>
<td><code>Number</code></td>
<td>Offset for line dashes. See <a href=3D"https://developer.mozilla.org/en=
-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset" target=3D"_blank"=
>MDN</a></td>
</tr>
<tr>
<td>borderJoinStyle</td>
<td><code>String</code></td>
<td>Line joint style. See <a href=3D"https://developer.mozilla.org/en-US/do=
cs/Web/API/CanvasRenderingContext2D/lineJoin" target=3D"_blank">MDN</a></td=
>
</tr>
<tr>
<td>pointBorderColor</td>
<td><code>Color or Array&lt;Color&gt;</code></td>
<td>The border color for points.</td>
</tr>
<tr>
<td>pointBackgroundColor</td>
<td><code>Color or Array&lt;Color&gt;</code></td>
<td>The fill color for points</td>
</tr>
<tr>
<td>pointBorderWidth</td>
<td><code>Number or Array&lt;Number&gt;</code></td>
<td>The width of the point border in pixels</td>
</tr>
<tr>
<td>pointRadius</td>
<td><code>Number or Array&lt;Number&gt;</code></td>
<td>The radius of the point shape. If set to 0, nothing is rendered. </td>
</tr>
<tr>
<td>pointHoverRadius</td>
<td><code>Number or Array&lt;Number&gt;</code></td>
<td>The radius of the point when hovered</td>
</tr>
<tr>
<td>pointHitRadius</td>
<td><code>Number or Array&lt;Number&gt;</code></td>
<td>The pixel size of the non-displayed point that reacts to mouse events</=
td>
</tr>
<tr>
<td>pointHoverBackgroundColor</td>
<td><code>Color or Array&lt;Color&gt;</code></td>
<td>Point background color when hovered</td>
</tr>
<tr>
<td>pointHoverBorderColor</td>
<td><code>Color or Array&lt;Color&gt;</code></td>
<td>Point border color when hovered</td>
</tr>
<tr>
<td>pointHoverBorderWidth</td>
<td><code>Number or Array&lt;Number&gt;</code></td>
<td>Border width of point when hovered</td>
</tr>
<tr>
<td>pointStyle</td>
<td><code>String, Array&lt;String&gt;, Image, Array&lt;Image&gt;</code></td=
>
<td>The style of point. Options are 'circle', 'triangle', 'rect', 'rectRot'=
, 'cross', 'crossRot', 'star', 'line', and 'dash'. If the option is an imag=
e, that image is drawn on the canvas using <code>drawImage</code>. </td>
</tr>
<tr>
<td>showLine</td>
<td><code>Boolean</code></td>
<td>If false, the line is not drawn for this dataset</td>
</tr>
<tr>
<td>spanGaps</td>
<td><code>Boolean</code></td>
<td>If true, lines will be drawn between points with no or null data</td>
</tr>
<tr>
<td>steppedLine</td>
<td><code>Boolean</code></td>
<td>If true, the line is shown as a steeped line and 'lineTension' will be =
ignored</td>
</tr>
</tbody>
</table>
</div><p>An example data object using these attributes is shown below.</p>
<pre><code class=3D"lang-javascript"><span class=3D"hljs-keyword">var</span=
> data =3D {
    labels: [<span class=3D"hljs-string">"January"</span>, <span class=3D"h=
ljs-string">"February"</span>, <span class=3D"hljs-string">"March"</span>, =
<span class=3D"hljs-string">"April"</span>, <span class=3D"hljs-string">"Ma=
y"</span>, <span class=3D"hljs-string">"June"</span>, <span class=3D"hljs-s=
tring">"July"</span>],
    datasets: [
        {
            label: <span class=3D"hljs-string">"My First dataset"</span>,
            fill: <span class=3D"hljs-literal">false</span>,
            lineTension: <span class=3D"hljs-number">0.1</span>,
            backgroundColor: <span class=3D"hljs-string">"rgba(75,192,192,0=
.4)"</span>,
            borderColor: <span class=3D"hljs-string">"rgba(75,192,192,1)"</=
span>,
            borderCapStyle: <span class=3D"hljs-string">'butt'</span>,
            borderDash: [],
            borderDashOffset: <span class=3D"hljs-number">0.0</span>,
            borderJoinStyle: <span class=3D"hljs-string">'miter'</span>,
            pointBorderColor: <span class=3D"hljs-string">"rgba(75,192,192,=
1)"</span>,
            pointBackgroundColor: <span class=3D"hljs-string">"#fff"</span>=
,
            pointBorderWidth: <span class=3D"hljs-number">1</span>,
            pointHoverRadius: <span class=3D"hljs-number">5</span>,
            pointHoverBackgroundColor: <span class=3D"hljs-string">"rgba(75=
,192,192,1)"</span>,
            pointHoverBorderColor: <span class=3D"hljs-string">"rgba(220,22=
0,220,1)"</span>,
            pointHoverBorderWidth: <span class=3D"hljs-number">2</span>,
            pointRadius: <span class=3D"hljs-number">1</span>,
            pointHitRadius: <span class=3D"hljs-number">10</span>,
            data: [<span class=3D"hljs-number">65</span>, <span class=3D"hl=
js-number">59</span>, <span class=3D"hljs-number">80</span>, <span class=3D=
"hljs-number">81</span>, <span class=3D"hljs-number">56</span>, <span class=
=3D"hljs-number">55</span>, <span class=3D"hljs-number">40</span>],
            spanGaps: <span class=3D"hljs-literal">false</span>,
        }
    ]
};
</code></pre>
<p>The line chart usually requires an array of labels. This labels are show=
n on the X axis. There must be one label for each data point. More labels t=
han datapoints are allowed, in which case the line ends at the last data po=
int.
The data for line charts is broken up into an array of datasets. Each datas=
et has a colour for the fill, a colour for the line and colours for the poi=
nts and strokes of the points. These colours are strings just like CSS. You=
 can use RGBA, RGB, HEX or HSL notation.</p>
<p>The label key on each dataset is optional, and can be used when generati=
ng a scale for the chart.</p>
<p>When <code>spanGaps</code> is set to true, the gaps between points in sp=
arse datasets are filled in. By default, it is off.</p>
<h3 id=3D"line-chart-data-points"><a class=3D"fragment-link" href=3D"http:/=
/www.chartjs.org/docs/#line-chart-data-points">Data Points</a></h3><p>The d=
ata passed to the chart can be passed in two formats. The most common metho=
d is to pass the data array as an array of numbers. In this case, the <code=
>data.labels</code> array must be specified and must contain a label for ea=
ch point or, in the case of labels to be displayed over multiple lines an a=
rray of labels (one for each line) i.e <code>[["June","2015"], "July"]</cod=
e>.</p>
<p>The alternate is used for sparse datasets. Data is specified using an ob=
ject containing <code>x</code> and <code>y</code> properties. This is used =
for scatter charts as documented below.</p>
<h3 id=3D"line-chart-scatter-line-charts"><a class=3D"fragment-link" href=
=3D"http://www.chartjs.org/docs/#line-chart-scatter-line-charts">Scatter Li=
ne Charts</a></h3><p>Scatter line charts can be created by changing the X a=
xis to a linear axis. To use a scatter chart, data must be passed as object=
s containing X and Y properties. The example below creates a scatter chart =
with 3 points.</p>
<pre><code class=3D"lang-javascript"><span class=3D"hljs-keyword">var</span=
> scatterChart =3D <span class=3D"hljs-keyword">new</span> Chart(ctx, {
    type: <span class=3D"hljs-string">'line'</span>,
    data: {
        datasets: [{
            label: <span class=3D"hljs-string">'Scatter Dataset'</span>,
            data: [{
                x: <span class=3D"hljs-number">-10</span>,
                y: <span class=3D"hljs-number">0</span>
            }, {
                x: <span class=3D"hljs-number">0</span>,
                y: <span class=3D"hljs-number">10</span>
            }, {
                x: <span class=3D"hljs-number">10</span>,
                y: <span class=3D"hljs-number">5</span>
            }]
        }]
    },
    options: {
        scales: {
            xAxes: [{
                type: <span class=3D"hljs-string">'linear'</span>,
                position: <span class=3D"hljs-string">'bottom'</span>
            }]
        }
    }
});
</code></pre>
<h3 id=3D"line-chart-chart-options"><a class=3D"fragment-link" href=3D"http=
://www.chartjs.org/docs/#line-chart-chart-options">Chart Options</a></h3><p=
>These are the customisation options specific to Line charts. These options=
 are merged with the <a href=3D"http://www.chartjs.org/docs/#chart-configur=
ation-global-configuration">global chart configuration options</a>, and for=
m the options of the chart.</p>
<div class=3D"table-wrapper"><table>
<thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>showLines</td>
<td>Boolean</td>
<td>true</td>
<td>If false, the lines between points are not drawn</td>
</tr>
<tr>
<td>spanGaps</td>
<td>Boolean</td>
<td>false</td>
<td>If true, NaN data does not break the line </td>
</tr>
</tbody>
</table>
</div><p>You can override these for your <code>Chart</code> instance by pas=
sing a member <code>options</code> into the <code>Line</code> method.</p>
<p>For example, we could have a line chart display without an X axis by doi=
ng the following. The config merge is smart enough to handle arrays so that=
 you do not need to specify all axis settings to change one thing.</p>
<pre><code class=3D"lang-javascript"><span class=3D"hljs-keyword">new</span=
> Chart(ctx, {
    type: <span class=3D"hljs-string">'line'</span>,
    data: data,
    options: {
        scales: {
            xAxes: [{
                display: <span class=3D"hljs-literal">false</span>
            }]
        }
    }
});
</code></pre>
<p>We can also change these defaults values for each Line type that is crea=
ted, this object is available at <code>Chart.defaults.line</code>.</p>
<h3 id=3D"line-chart-stacked-charts"><a class=3D"fragment-link" href=3D"htt=
p://www.chartjs.org/docs/#line-chart-stacked-charts">Stacked Charts</a></h3=
><p>Stacked area charts can be created by setting the Y axis to a stacked c=
onfiguration. The following example would have stacked lines.</p>
<pre><code class=3D"lang-javascript"><span class=3D"hljs-keyword">var</span=
> stackedLine =3D <span class=3D"hljs-keyword">new</span> Chart(ctx, {
    type: <span class=3D"hljs-string">'line'</span>,
    data: data,
    options: {
        scales: {
            yAxes: [{
                stacked: <span class=3D"hljs-literal">true</span>
            }]
        }
    }
});
</code></pre>

		</div>
	</section>

		=09
			=09
	<section id=3D"bar-chart">
		<h2 class=3D"section-title">
			<a class=3D"fragment-link" href=3D"http://www.chartjs.org/docs/#bar-char=
t">Bar Chart</a>
		</h2>
		<div class=3D"section-text">
			<h3 id=3D"bar-chart-introduction"><a class=3D"fragment-link" href=3D"htt=
p://www.chartjs.org/docs/#bar-chart-introduction">Introduction</a></h3><p>A=
 bar chart is a way of showing data as bars.</p>
<p>It is sometimes used to show trend data, and the comparison of multiple =
data sets side by side.</p>
<div class=3D"canvas-holder"><iframe class=3D"chartjs-hidden-iframe" style=
=3D"width: 100%; display: block; border: 0px; height: 0px; margin: 0px; pos=
ition: absolute; left: 0px; right: 0px; top: 0px; bottom: 0px;" src=3D"wyci=
wyg://frame/1"></iframe>
    <canvas width=3D"1860" height=3D"930" style=3D"display: block; width: 6=
20px; height: 310px;"></canvas>
</div>

<h3 id=3D"bar-chart-example-usage"><a class=3D"fragment-link" href=3D"http:=
//www.chartjs.org/docs/#bar-chart-example-usage">Example Usage</a></h3><pre=
><code class=3D"lang-javascript"><span class=3D"hljs-keyword">var</span> my=
BarChart =3D <span class=3D"hljs-keyword">new</span> Chart(ctx, {
    type: <span class=3D"hljs-string">'bar'</span>,
    data: data,
    options: options
});
</code></pre>
<p>Or if you want horizontal bars.</p>
<pre><code class=3D"lang-javascript"><span class=3D"hljs-keyword">var</span=
> myBarChart =3D <span class=3D"hljs-keyword">new</span> Chart(ctx, {
    type: <span class=3D"hljs-string">'horizontalBar'</span>,
    data: data,
    options: options
});
</code></pre>
<h3 id=3D"bar-chart-data-structure"><a class=3D"fragment-link" href=3D"http=
://www.chartjs.org/docs/#bar-chart-data-structure">Data Structure</a></h3><=
p>The following options can be included in a bar chart dataset to configure=
 options for that specific dataset.</p>
<p>Some properties can be specified as an array. If these are set to an arr=
ay value, the first value applies to the first bar, the second value to the=
 second bar, and so on.</p>
<div class=3D"table-wrapper"><table>
<thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Usage</th>
</tr>
</thead>
<tbody>
<tr>
<td>data</td>
<td><code>Array&lt;Number&gt;</code></td>
<td>The data to plot as bars</td>
</tr>
<tr>
<td>label</td>
<td><code>String</code></td>
<td>The label for the dataset which appears in the legend and tooltips</td>
</tr>
<tr>
<td>xAxisID</td>
<td><code>String</code></td>
<td>The ID of the x axis to plot this dataset on</td>
</tr>
<tr>
<td>yAxisID</td>
<td><code>String</code></td>
<td>The ID of the y axis to plot this dataset on</td>
</tr>
<tr>
<td>backgroundColor</td>
<td><code>Color or Array&lt;Color&gt;</code></td>
<td>The fill color of the bars. See <a href=3D"http://www.chartjs.org/docs/=
#chart-configuration-colors">Colors</a></td>
</tr>
<tr>
<td>borderColor</td>
<td><code>Color or Array&lt;Color&gt;</code></td>
<td>Bar border color</td>
</tr>
<tr>
<td>borderWidth</td>
<td><code>Number or Array&lt;Number&gt;</code></td>
<td>Border width of bar in pixels</td>
</tr>
<tr>
<td>borderSkipped</td>
<td><code>String or Array&lt;String&gt;</code></td>
<td>Which edge to skip drawing the border for. Options are 'bottom', 'left'=
, 'top', and 'right'</td>
</tr>
<tr>
<td>hoverBackgroundColor</td>
<td><code>Color or Array&lt;Color&gt;</code></td>
<td>Bar background color when hovered</td>
</tr>
<tr>
<td>hoverBorderColor</td>
<td><code>Color or Array&lt;Color&gt;</code></td>
<td>Bar border color when hovered</td>
</tr>
<tr>
<td>hoverBorderWidth</td>
<td><code>Number or Array&lt;Number&gt;</code></td>
<td>Border width of bar when hovered</td>
</tr>
</tbody>
</table>
</div><p>An example data object using these attributes is shown below.</p>
<pre><code class=3D"lang-javascript"><span class=3D"hljs-keyword">var</span=
> data =3D {
    labels: [<span class=3D"hljs-string">"January"</span>, <span class=3D"h=
ljs-string">"February"</span>, <span class=3D"hljs-string">"March"</span>, =
<span class=3D"hljs-string">"April"</span>, <span class=3D"hljs-string">"Ma=
y"</span>, <span class=3D"hljs-string">"June"</span>, <span class=3D"hljs-s=
tring">"July"</span>],
    datasets: [
        {
            label: <span class=3D"hljs-string">"My First dataset"</span>,
            backgroundColor: [
                <span class=3D"hljs-string">'rgba(255, 99, 132, 0.2)'</span=
>,
                <span class=3D"hljs-string">'rgba(54, 162, 235, 0.2)'</span=
>,
                <span class=3D"hljs-string">'rgba(255, 206, 86, 0.2)'</span=
>,
                <span class=3D"hljs-string">'rgba(75, 192, 192, 0.2)'</span=
>,
                <span class=3D"hljs-string">'rgba(153, 102, 255, 0.2)'</spa=
n>,
                <span class=3D"hljs-string">'rgba(255, 159, 64, 0.2)'</span=
>
            ],
            borderColor: [
                <span class=3D"hljs-string">'rgba(255,99,132,1)'</span>,
                <span class=3D"hljs-string">'rgba(54, 162, 235, 1)'</span>,
                <span class=3D"hljs-string">'rgba(255, 206, 86, 1)'</span>,
                <span class=3D"hljs-string">'rgba(75, 192, 192, 1)'</span>,
                <span class=3D"hljs-string">'rgba(153, 102, 255, 1)'</span>=
,
                <span class=3D"hljs-string">'rgba(255, 159, 64, 1)'</span>
            ],
            borderWidth: <span class=3D"hljs-number">1</span>,
            data: [<span class=3D"hljs-number">65</span>, <span class=3D"hl=
js-number">59</span>, <span class=3D"hljs-number">80</span>, <span class=3D=
"hljs-number">81</span>, <span class=3D"hljs-number">56</span>, <span class=
=3D"hljs-number">55</span>, <span class=3D"hljs-number">40</span>],
        }
    ]
};
</code></pre>
<p>The bar chart has the a very similar data structure to the line chart, a=
nd has an array of datasets, each with colours and an array of data.
We have an array of labels too for display. In the example, we are showing =
the same data as the previous line chart example.</p>
<h3 id=3D"bar-chart-chart-options"><a class=3D"fragment-link" href=3D"http:=
//www.chartjs.org/docs/#bar-chart-chart-options">Chart Options</a></h3><p>T=
hese are the customisation options specific to Bar charts. These options ar=
e merged with the <a href=3D"http://www.chartjs.org/docs/#global-chart-conf=
iguration">global chart configuration options</a>, and form the options of =
the chart.</p>
<p>The default options for bar chart are defined in <code>Chart.defaults.ba=
r</code>.</p>
<div class=3D"table-wrapper"><table>
<thead>
<tr>
<th>Name</th>
<th style=3D"text-align:center">Type</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><em>hover</em>.mode</td>
<td style=3D"text-align:center">String</td>
<td>"label"</td>
<td>Label's hover mode. "label" is used since the x axis displays data by t=
he index in the dataset.</td>
</tr>
<tr>
<td>scales</td>
<td style=3D"text-align:center">Object</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td><em>scales</em>.xAxes</td>
<td style=3D"text-align:center">Array</td>
<td></td>
<td>The bar chart officially supports only 1 x-axis but uses an array to ke=
ep the API consistent. Use a scatter chart if you need multiple x axes.</td=
>
</tr>
<tr>
<td><em>Options for xAxes</em></td>
<td style=3D"text-align:center"></td>
<td></td>
<td></td>
</tr>
<tr>
<td>type</td>
<td style=3D"text-align:center">String</td>
<td>"Category"</td>
<td>As defined in <a href=3D"http://www.chartjs.org/docs/#scales-category-s=
cale">Scales</a>.</td>
</tr>
<tr>
<td>display</td>
<td style=3D"text-align:center">Boolean</td>
<td>true</td>
<td>If true, show the scale.</td>
</tr>
<tr>
<td>id</td>
<td style=3D"text-align:center">String</td>
<td>"x-axis-0"</td>
<td>Id of the axis so that data can bind to it</td>
</tr>
<tr>
<td>stacked</td>
<td style=3D"text-align:center">Boolean</td>
<td>false</td>
<td>If true, bars are stacked on the x-axis</td>
</tr>
<tr>
<td>categoryPercentage</td>
<td style=3D"text-align:center">Number</td>
<td>0.8</td>
<td>Percent (0-1) of the available width (the space between the gridlines f=
or small datasets) for each data-point to use for the bars. <a href=3D"http=
://www.chartjs.org/docs/#bar-chart-barpercentage-vs-categorypercentage">Rea=
d More</a></td>
</tr>
<tr>
<td>barPercentage</td>
<td style=3D"text-align:center">Number</td>
<td>0.9</td>
<td>Percent (0-1) of the available width each bar should be within the cate=
gory percentage. 1.0 will take the whole category width and put the bars ri=
ght next to each other. <a href=3D"http://www.chartjs.org/docs/#bar-chart-b=
arpercentage-vs-categorypercentage">Read More</a></td>
</tr>
<tr>
<td>gridLines</td>
<td style=3D"text-align:center">Object</td>
<td><a href=3D"http://www.chartjs.org/docs/#scales">See Scales</a></td>
<td></td>
</tr>
<tr>
<td><em>gridLines</em>.offsetGridLines</td>
<td style=3D"text-align:center">Boolean</td>
<td>true</td>
<td>If true, the bars for a particular data point fall between the grid lin=
es. If false, the grid line will go right down the middle of the bars.</td>
</tr>
<tr>
<td></td>
<td style=3D"text-align:center"></td>
<td></td>
<td></td>
</tr>
<tr>
<td><em>scales</em>.yAxes</td>
<td style=3D"text-align:center">Array</td>
<td><code>[{ type: "linear" }]</code></td>
<td></td>
</tr>
<tr>
<td><em>Options for yAxes</em></td>
<td style=3D"text-align:center"></td>
<td></td>
<td></td>
</tr>
<tr>
<td>type</td>
<td style=3D"text-align:center">String</td>
<td>"linear"</td>
<td>As defined in <a href=3D"http://www.chartjs.org/docs/#scales-linear-sca=
le">Scales</a>.</td>
</tr>
<tr>
<td>display</td>
<td style=3D"text-align:center">Boolean</td>
<td>true</td>
<td>If true, show the scale.</td>
</tr>
<tr>
<td>id</td>
<td style=3D"text-align:center">String</td>
<td>"y-axis-0"</td>
<td>Id of the axis so that data can bind to it.</td>
</tr>
<tr>
<td>stacked</td>
<td style=3D"text-align:center">Boolean</td>
<td>false</td>
<td>If true, bars are stacked on the y-axis</td>
</tr>
</tbody>
</table>
</div><p>You can override these for your <code>Chart</code> instance by pas=
sing a second argument into the <code>Bar</code> method as an object with t=
he keys you want to override.</p>
<p>For example, we could have a bar chart without a stroke on each bar by d=
oing the following:</p>
<pre><code class=3D"lang-javascript"><span class=3D"hljs-keyword">new</span=
> Chart(ctx, {
    type: <span class=3D"hljs-string">"bar"</span>,
    data: data,
    options: {
        scales: {
                xAxes: [{
                        stacked: <span class=3D"hljs-literal">true</span>
                }],
                yAxes: [{
                        stacked: <span class=3D"hljs-literal">true</span>
                }]
            }
        }
    }
});
<span class=3D"hljs-comment">// This will create a chart with all of the de=
fault options, merged from the global config,</span>
<span class=3D"hljs-comment">//  and the Bar chart defaults but this partic=
ular instance will have `stacked` set to true</span>
<span class=3D"hljs-comment">// for both x and y axes.</span>
</code></pre>
<p>We can also change these defaults values for each Bar type that is creat=
ed, this object is available at <code>Chart.defaults.bar</code>. For horizo=
ntal bars, this object is available at <code>Chart.defaults.horizontalBar</=
code>.</p>
<p>The default options for horizontal bar charts are defined in <code>Chart=
.defaults.horizontalBar</code> and are same as those of the bar chart, but =
with <code>xAxes</code> and <code>yAxes</code> swapped and the following ad=
ditional options.</p>
<div class=3D"table-wrapper"><table>
<thead>
<tr>
<th>Name</th>
<th style=3D"text-align:center">Type</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><em>Options for xAxes</em></td>
<td style=3D"text-align:center"></td>
<td></td>
<td></td>
</tr>
<tr>
<td>position</td>
<td style=3D"text-align:center">String</td>
<td>"bottom"</td>
<td></td>
</tr>
<tr>
<td><em>Options for yAxes</em></td>
<td style=3D"text-align:center"></td>
<td></td>
<td></td>
</tr>
<tr>
<td>position</td>
<td style=3D"text-align:center">String</td>
<td>"left"</td>
<td></td>
</tr>
</tbody>
</table>
</div><h3 id=3D"bar-chart-barpercentage-vs-categorypercentage"><a class=3D"=
fragment-link" href=3D"http://www.chartjs.org/docs/#bar-chart-barpercentage=
-vs-categorypercentage">barPercentage vs categoryPercentage</a></h3><p>The =
following shows the relationship between the bar percentage option and the =
category percentage option.</p>
<pre><code class=3D"lang-text">// categoryPercentage: 1.0
// barPercentage: 1.0
Bar:        | 1.0 | 1.0 |
Category:   |    1.0    |  =20
Sample:     |=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D|

// categoryPercentage: 1.0
// barPercentage: 0.5
Bar:          |.5|  |.5|
Category:  |      1.0     |  =20
Sample:    |=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D|

// categoryPercentage: 0.5
// barPercentage: 1.0
Bar:            |1.||1.|
Category:       |  .5  |  =20
Sample:     |=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D|
</code></pre>

		</div>
	</section>

		=09
			=09
	<section id=3D"radar-chart">
		<h2 class=3D"section-title">
			<a class=3D"fragment-link" href=3D"http://www.chartjs.org/docs/#radar-ch=
art">Radar Chart</a>
		</h2>
		<div class=3D"section-text">
			<h3 id=3D"radar-chart-introduction"><a class=3D"fragment-link" href=3D"h=
ttp://www.chartjs.org/docs/#radar-chart-introduction">Introduction</a></h3>=
<p>A radar chart is a way of showing multiple data points and the variation=
 between them.</p>
<p>They are often useful for comparing the points of two or more different =
data sets.</p>
<div class=3D"canvas-holder"><iframe class=3D"chartjs-hidden-iframe" style=
=3D"width: 100%; display: block; border: 0px; height: 0px; margin: 0px; pos=
ition: absolute; left: 0px; right: 0px; top: 0px; bottom: 0px;" src=3D"wyci=
wyg://frame/2"></iframe>
    <canvas width=3D"1860" height=3D"930" style=3D"display: block; width: 6=
20px; height: 310px;"></canvas>
</div>

<h3 id=3D"radar-chart-example-usage"><a class=3D"fragment-link" href=3D"htt=
p://www.chartjs.org/docs/#radar-chart-example-usage">Example Usage</a></h3>=
<pre><code class=3D"lang-javascript"><span class=3D"hljs-keyword">var</span=
> myRadarChart =3D <span class=3D"hljs-keyword">new</span> Chart(ctx, {
    type: <span class=3D"hljs-string">'radar'</span>,
    data: data,
    options: options
});
</code></pre>
<h3 id=3D"radar-chart-data-structure"><a class=3D"fragment-link" href=3D"ht=
tp://www.chartjs.org/docs/#radar-chart-data-structure">Data Structure</a></=
h3><p>The following options can be included in a radar chart dataset to con=
figure options for that specific dataset.</p>
<p>All point* properties can be specified as an array. If these are set to =
an array value, the first value applies to the first point, the second valu=
e to the second point, and so on.</p>
<div class=3D"table-wrapper"><table>
<thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Usage</th>
</tr>
</thead>
<tbody>
<tr>
<td>data</td>
<td><code>Array&lt;Number&gt;</code></td>
<td>The data to plot in a line</td>
</tr>
<tr>
<td>label</td>
<td><code>String</code></td>
<td>The label for the dataset which appears in the legend and tooltips</td>
</tr>
<tr>
<td>fill</td>
<td><code>Boolean</code></td>
<td>If true, fill the area under the line</td>
</tr>
<tr>
<td>lineTension</td>
<td><code>Number</code></td>
<td>Bezier curve tension of the line. Set to 0 to draw straightlines. <em>N=
ote</em> This was renamed from 'tension' but the old name still works.</td>
</tr>
<tr>
<td>backgroundColor</td>
<td><code>Color</code></td>
<td>The fill color under the line. See <a href=3D"http://www.chartjs.org/do=
cs/#chart-configuration-colors">Colors</a></td>
</tr>
<tr>
<td>borderWidth</td>
<td><code>Number</code></td>
<td>The width of the line in pixels</td>
</tr>
<tr>
<td>borderColor</td>
<td><code>Color</code></td>
<td>The color of the line.</td>
</tr>
<tr>
<td>borderCapStyle</td>
<td><code>String</code></td>
<td>Cap style of the line. See <a href=3D"https://developer.mozilla.org/en-=
US/docs/Web/API/CanvasRenderingContext2D/lineCap" target=3D"_blank">MDN</a>=
</td>
</tr>
<tr>
<td>borderDash</td>
<td><code>Array&lt;Number&gt;</code></td>
<td>Length and spacing of dashes. See <a href=3D"https://developer.mozilla.=
org/en-US/docs/Web/API/CanvasRenderingContext2D/setLineDash" target=3D"_bla=
nk">MDN</a></td>
</tr>
<tr>
<td>borderDashOffset</td>
<td><code>Number</code></td>
<td>Offset for line dashes. See <a href=3D"https://developer.mozilla.org/en=
-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset" target=3D"_blank"=
>MDN</a></td>
</tr>
<tr>
<td>borderJoinStyle</td>
<td><code>String</code></td>
<td>Line joint style. See <a href=3D"https://developer.mozilla.org/en-US/do=
cs/Web/API/CanvasRenderingContext2D/lineJoin" target=3D"_blank">MDN</a></td=
>
</tr>
<tr>
<td>pointBorderColor</td>
<td><code>Color or Array&lt;Color&gt;</code></td>
<td>The border color for points.</td>
</tr>
<tr>
<td>pointBackgroundColor</td>
<td><code>Color or Array&lt;Color&gt;</code></td>
<td>The fill color for points</td>
</tr>
<tr>
<td>pointBorderWidth</td>
<td><code>Number or Array&lt;Number&gt;</code></td>
<td>The width of the point border in pixels</td>
</tr>
<tr>
<td>pointRadius</td>
<td><code>Number or Array&lt;Number&gt;</code></td>
<td>The radius of the point shape. If set to 0, nothing is rendered. </td>
</tr>
<tr>
<td>pointHoverRadius</td>
<td><code>Number or Array&lt;Number&gt;</code></td>
<td>The radius of the point when hovered</td>
</tr>
<tr>
<td>hitRadius</td>
<td><code>Number or Array&lt;Number&gt;</code></td>
<td>The pixel size of the non-displayed point that reacts to mouse events</=
td>
</tr>
<tr>
<td>pointHoverBackgroundColor</td>
<td><code>Color or Array&lt;Color&gt;</code></td>
<td>Point background color when hovered</td>
</tr>
<tr>
<td>pointHoverBorderColor</td>
<td><code>Color or Array&lt;Color&gt;</code></td>
<td>Point border color when hovered</td>
</tr>
<tr>
<td>pointHoverBorderWidth</td>
<td><code>Number or Array&lt;Number&gt;</code></td>
<td>Border width of point when hovered</td>
</tr>
<tr>
<td>pointStyle</td>
<td><code>String or Array&lt;String&gt;</code></td>
<td>The style of point. Options include 'circle', 'triangle', 'rect', 'rect=
Rot', 'cross', 'crossRot', 'star', 'line', and 'dash'</td>
</tr>
</tbody>
</table>
</div><p>An example data object using these attributes is shown below.</p>
<pre><code class=3D"lang-javascript"><span class=3D"hljs-keyword">var</span=
> data =3D {
    labels: [<span class=3D"hljs-string">"Eating"</span>, <span class=3D"hl=
js-string">"Drinking"</span>, <span class=3D"hljs-string">"Sleeping"</span>=
, <span class=3D"hljs-string">"Designing"</span>, <span class=3D"hljs-strin=
g">"Coding"</span>, <span class=3D"hljs-string">"Cycling"</span>, <span cla=
ss=3D"hljs-string">"Running"</span>],
    datasets: [
        {
            label: <span class=3D"hljs-string">"My First dataset"</span>,
            backgroundColor: <span class=3D"hljs-string">"rgba(179,181,198,=
0.2)"</span>,
            borderColor: <span class=3D"hljs-string">"rgba(179,181,198,1)"<=
/span>,
            pointBackgroundColor: <span class=3D"hljs-string">"rgba(179,181=
,198,1)"</span>,
            pointBorderColor: <span class=3D"hljs-string">"#fff"</span>,
            pointHoverBackgroundColor: <span class=3D"hljs-string">"#fff"</=
span>,
            pointHoverBorderColor: <span class=3D"hljs-string">"rgba(179,18=
1,198,1)"</span>,
            data: [<span class=3D"hljs-number">65</span>, <span class=3D"hl=
js-number">59</span>, <span class=3D"hljs-number">90</span>, <span class=3D=
"hljs-number">81</span>, <span class=3D"hljs-number">56</span>, <span class=
=3D"hljs-number">55</span>, <span class=3D"hljs-number">40</span>]
        },
        {
            label: <span class=3D"hljs-string">"My Second dataset"</span>,
            backgroundColor: <span class=3D"hljs-string">"rgba(255,99,132,0=
.2)"</span>,
            borderColor: <span class=3D"hljs-string">"rgba(255,99,132,1)"</=
span>,
            pointBackgroundColor: <span class=3D"hljs-string">"rgba(255,99,=
132,1)"</span>,
            pointBorderColor: <span class=3D"hljs-string">"#fff"</span>,
            pointHoverBackgroundColor: <span class=3D"hljs-string">"#fff"</=
span>,
            pointHoverBorderColor: <span class=3D"hljs-string">"rgba(255,99=
,132,1)"</span>,
            data: [<span class=3D"hljs-number">28</span>, <span class=3D"hl=
js-number">48</span>, <span class=3D"hljs-number">40</span>, <span class=3D=
"hljs-number">19</span>, <span class=3D"hljs-number">96</span>, <span class=
=3D"hljs-number">27</span>, <span class=3D"hljs-number">100</span>]
        }
    ]
};
</code></pre>
<p>For a radar chart, to provide context of what each point means, we inclu=
de an array of strings that show around each point in the chart.
For the radar chart data, we have an array of datasets. Each of these is an=
 object, with a fill colour, a stroke colour, a colour for the fill of each=
 point, and a colour for the stroke of each point. We also have an array of=
 data values.
The label key on each dataset is optional, and can be used when generating =
a scale for the chart.</p>
<h3 id=3D"radar-chart-chart-options"><a class=3D"fragment-link" href=3D"htt=
p://www.chartjs.org/docs/#radar-chart-chart-options">Chart Options</a></h3>=
<p>These are the customisation options specific to Radar charts. These opti=
ons are merged with the <a href=3D"http://www.chartjs.org/docs/#global-char=
t-configuration">global chart configuration options</a>, and form the optio=
ns of the chart.</p>
<p>The default options for radar chart are defined in <code>Chart.defaults.=
radar</code>.</p>
<div class=3D"table-wrapper"><table>
<thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>scale</td>
<td>Object</td>
<td><a href=3D"http://www.chartjs.org/docs/#scales">See Scales</a> and <a h=
ref=3D"http://www.chartjs.org/docs/#scales-radial-linear-scale">Defaults fo=
r Radial Linear Scale</a></td>
<td>Options for the one scale used on the chart. Use this to style the tick=
s, labels, and grid lines.</td>
</tr>
<tr>
<td><em>scale</em>.type</td>
<td>String</td>
<td>"radialLinear"</td>
<td>As defined in <a href=3D"http://www.chartjs.org/docs/#scales-radial-lin=
ear-scale">"Radial Linear"</a>.</td>
</tr>
<tr>
<td><em>elements</em>.line</td>
<td>Object</td>
<td></td>
<td>Options for all line elements used on the chart, as defined in the glob=
al elements, duplicated here to show Radar chart specific defaults.</td>
</tr>
<tr>
<td><em>elements.line</em>.lineTension</td>
<td>Number</td>
<td>0</td>
<td>Tension exhibited by lines when calculating splineCurve. Setting to 0 c=
reates straight lines.</td>
</tr>
</tbody>
</table>
</div><p>You can override these for your <code>Chart</code> instance by pas=
sing a second argument into the <code>Radar</code> method as an object with=
 the keys you want to override.</p>
<p>For example, we could have a radar chart without a point for each on pie=
ce of data by doing the following:</p>
<pre><code class=3D"lang-javascript"><span class=3D"hljs-keyword">new</span=
> Chart(ctx, {
    type: <span class=3D"hljs-string">"radar"</span>,
    data: data,
    options: {
            scale: {
                reverse: <span class=3D"hljs-literal">true</span>,
                ticks: {
                    beginAtZero: <span class=3D"hljs-literal">true</span>
                }
            }
    }
});
<span class=3D"hljs-comment">// This will create a chart with all of the de=
fault options, merged from the global config,</span>
<span class=3D"hljs-comment">//  and the Radar chart defaults but this part=
icular instance's scale will be reversed as</span>
<span class=3D"hljs-comment">// well as the ticks beginning at zero.</span>
</code></pre>
<p>We can also change these defaults values for each Radar type that is cre=
ated, this object is available at <code>Chart.defaults.radar</code>.</p>

		</div>
	</section>

		=09
			=09
	<section id=3D"polar-area-chart">
		<h2 class=3D"section-title">
			<a class=3D"fragment-link" href=3D"http://www.chartjs.org/docs/#polar-ar=
ea-chart">Polar Area Chart</a>
		</h2>
		<div class=3D"section-text">
			<h3 id=3D"polar-area-chart-introduction"><a class=3D"fragment-link" href=
=3D"http://www.chartjs.org/docs/#polar-area-chart-introduction">Introductio=
n</a></h3><p>Polar area charts are similar to pie charts, but each segment =
has the same angle - the radius of the segment differs depending on the val=
ue.</p>
<p>This type of chart is often useful when we want to show a comparison dat=
a similar to a pie chart, but also show a scale of values for context.</p>
<div class=3D"canvas-holder"><iframe class=3D"chartjs-hidden-iframe" style=
=3D"width: 100%; display: block; border: 0px; height: 0px; margin: 0px; pos=
ition: absolute; left: 0px; right: 0px; top: 0px; bottom: 0px;" src=3D"wyci=
wyg://frame/3"></iframe>
    <canvas width=3D"1860" height=3D"930" style=3D"display: block; width: 6=
20px; height: 310px;"></canvas>
</div>

<h3 id=3D"polar-area-chart-example-usage"><a class=3D"fragment-link" href=
=3D"http://www.chartjs.org/docs/#polar-area-chart-example-usage">Example Us=
age</a></h3><pre><code class=3D"lang-javascript"><span class=3D"hljs-keywor=
d">new</span> Chart(ctx, {
    data: data,
    type: <span class=3D"hljs-string">'polarArea'</span>,
    options: options
});
</code></pre>
<h3 id=3D"polar-area-chart-data-structure"><a class=3D"fragment-link" href=
=3D"http://www.chartjs.org/docs/#polar-area-chart-data-structure">Data Stru=
cture</a></h3><p>The following options can be included in a polar area char=
t dataset to configure options for that specific dataset.</p>
<p>Some properties are specified as arrays. The first value applies to the =
first bar, the second value to the second bar, and so on.</p>
<div class=3D"table-wrapper"><table>
<thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Usage</th>
</tr>
</thead>
<tbody>
<tr>
<td>data</td>
<td><code>Array&lt;Number&gt;</code></td>
<td>The data to plot as arcs</td>
</tr>
<tr>
<td>label</td>
<td><code>String</code></td>
<td>The label for the dataset which appears in the legend and tooltips</td>
</tr>
<tr>
<td>backgroundColor</td>
<td><code>Array&lt;Color&gt;</code></td>
<td>The fill color of the arcs. See <a href=3D"http://www.chartjs.org/docs/=
#chart-configuration-colors">Colors</a></td>
</tr>
<tr>
<td>borderColor</td>
<td><code>Array&lt;Color&gt;</code></td>
<td>Arc border color</td>
</tr>
<tr>
<td>borderWidth</td>
<td><code>Array&lt;Number&gt;</code></td>
<td>Border width of arcs in pixels</td>
</tr>
<tr>
<td>hoverBackgroundColor</td>
<td><code>Array&lt;Color&gt;</code></td>
<td>Arc background color when hovered</td>
</tr>
<tr>
<td>hoverBorderColor</td>
<td><code>Array&lt;Color&gt;</code></td>
<td>Arc border color when hovered</td>
</tr>
<tr>
<td>hoverBorderWidth</td>
<td><code>Array&lt;Number&gt;</code></td>
<td>Border width of arc when hovered</td>
</tr>
</tbody>
</table>
</div><p>An example data object using these attributes is shown below.</p>
<pre><code class=3D"lang-javascript"><span class=3D"hljs-keyword">var</span=
> data =3D {
    datasets: [{
        data: [
            <span class=3D"hljs-number">11</span>,
            <span class=3D"hljs-number">16</span>,
            <span class=3D"hljs-number">7</span>,
            <span class=3D"hljs-number">3</span>,
            <span class=3D"hljs-number">14</span>
        ],
        backgroundColor: [
            <span class=3D"hljs-string">"#FF6384"</span>,
            <span class=3D"hljs-string">"#4BC0C0"</span>,
            <span class=3D"hljs-string">"#FFCE56"</span>,
            <span class=3D"hljs-string">"#E7E9ED"</span>,
            <span class=3D"hljs-string">"#36A2EB"</span>
        ],
        label: <span class=3D"hljs-string">'My dataset'</span> <span class=
=3D"hljs-comment">// for legend</span>
    }],
    labels: [
        <span class=3D"hljs-string">"Red"</span>,
        <span class=3D"hljs-string">"Green"</span>,
        <span class=3D"hljs-string">"Yellow"</span>,
        <span class=3D"hljs-string">"Grey"</span>,
        <span class=3D"hljs-string">"Blue"</span>
    ]
};
</code></pre>
<p>As you can see, for the chart data you pass in an array of objects, with=
 a value and a colour. The value attribute should be a number, while the co=
lor attribute should be a string. Similar to CSS, for this string you can u=
se HEX notation, RGB, RGBA or HSL.</p>
<h3 id=3D"polar-area-chart-chart-options"><a class=3D"fragment-link" href=
=3D"http://www.chartjs.org/docs/#polar-area-chart-chart-options">Chart Opti=
ons</a></h3><p>These are the customisation options specific to Polar Area c=
harts. These options are merged with the <a href=3D"http://www.chartjs.org/=
docs/#global-chart-configuration">global chart configuration options</a>, a=
nd form the options of the chart.</p>
<div class=3D"table-wrapper"><table>
<thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>scale</td>
<td>Object</td>
<td><a href=3D"http://www.chartjs.org/docs/#scales">See Scales</a> and <a h=
ref=3D"http://www.chartjs.org/docs/#scales-radial-linear-scale">Defaults fo=
r Radial Linear Scale</a></td>
<td>Options for the one scale used on the chart. Use this to style the tick=
s, labels, and grid.</td>
</tr>
<tr>
<td><em>scale</em>.type</td>
<td>String</td>
<td>"radialLinear"</td>
<td>As defined in <a href=3D"http://www.chartjs.org/docs/#scales-radial-lin=
ear-scale">"Radial Linear"</a>.</td>
</tr>
<tr>
<td><em>scale</em>.lineArc</td>
<td>Boolean</td>
<td>true</td>
<td>When true, lines are circular.</td>
</tr>
<tr>
<td><em>animation</em>.animateRotate</td>
<td>Boolean</td>
<td>true</td>
<td>If true, will animate the rotation of the chart.</td>
</tr>
<tr>
<td><em>animation</em>.animateScale</td>
<td>Boolean</td>
<td>true</td>
<td>If true, will animate scaling the chart.</td>
</tr>
<tr>
<td><em>legend</em>.<em>labels</em>.generateLabels</td>
<td>Function</td>
<td><code>function(data) {}</code></td>
<td>Returns labels for each the legend</td>
</tr>
<tr>
<td><em>legend</em>.onClick</td>
<td>Function</td>
<td>function(event, legendItem) {} `</td>
<td>Handles clicking an individual legend item</td>
</tr>
<tr>
<td>legendCallback</td>
<td>Function</td>
<td><code>function(chart)</code></td>
<td>Generates the HTML legend via calls to <code>generateLegend</code></td>
</tr>
</tbody>
</table>
</div><p>You can override these for your <code>Chart</code> instance by pas=
sing a second argument into the <code>PolarArea</code> method as an object =
with the keys you want to override.</p>
<p>For example, we could have a polar area chart with a black stroke on eac=
h segment like so:</p>
<pre><code class=3D"lang-javascript"><span class=3D"hljs-keyword">new</span=
> Chart(ctx, {
    data: data,
    type: <span class=3D"hljs-string">"polarArea"</span>,
    options: {
        elements: {
            arc: {
                borderColor: <span class=3D"hljs-string">"#000000"</span>
            }
        }
    }
});
<span class=3D"hljs-comment">// This will create a chart with all of the de=
fault options, merged from the global config,</span>
<span class=3D"hljs-comment">// and the PolarArea chart defaults but this p=
articular instance will have `elements.arc.borderColor` set to `"#000000"`.=
</span>
</code></pre>
<p>We can also change these defaults values for each PolarArea type that is=
 created, this object is available at <code>Chart.defaults.polarArea</code>=
.</p>

		</div>
	</section>

		=09
			=09
	<section id=3D"doughnut-pie-chart">
		<h2 class=3D"section-title">
			<a class=3D"fragment-link" href=3D"http://www.chartjs.org/docs/#doughnut=
-pie-chart">Pie &amp; Doughnut Charts</a>
		</h2>
		<div class=3D"section-text">
			<h3 id=3D"doughnut-pie-chart-introduction"><a class=3D"fragment-link" hr=
ef=3D"http://www.chartjs.org/docs/#doughnut-pie-chart-introduction">Introdu=
ction</a></h3><p>Pie and doughnut charts are probably the most commonly use=
d chart there are. They are divided into segments, the arc of each segment =
shows the proportional value of each piece of data.</p>
<p>They are excellent at showing the relational proportions between data.</=
p>
<p>Pie and doughnut charts are effectively the same class in Chart.js, but =
have one different default value - their <code>cutoutPercentage</code>. Thi=
s equates what percentage of the inner should be cut out. This defaults to =
<code>0</code> for pie charts, and <code>50</code> for doughnuts.</p>
<p>They are also registered under two aliases in the <code>Chart</code> cor=
e. Other than their different default value, and different alias, they are =
exactly the same.</p>
<div class=3D"canvas-holder half"><iframe class=3D"chartjs-hidden-iframe" s=
tyle=3D"width: 100%; display: block; border: 0px; height: 0px; margin: 0px;=
 position: absolute; left: 0px; right: 0px; top: 0px; bottom: 0px;" src=3D"=
wyciwyg://frame/4"></iframe>
    <canvas width=3D"930" height=3D"465" style=3D"display: block; width: 31=
0px; height: 155px;"></canvas>
</div>

<p></p><div class=3D"canvas-holder half"><iframe class=3D"chartjs-hidden-if=
rame" style=3D"width: 100%; display: block; border: 0px; height: 0px; margi=
n: 0px; position: absolute; left: 0px; right: 0px; top: 0px; bottom: 0px;" =
src=3D"wyciwyg://frame/5"></iframe>
    <canvas width=3D"930" height=3D"465" style=3D"display: block; width: 31=
0px; height: 155px;"></canvas>
</div>
<br><p></p>
<h3 id=3D"doughnut-pie-chart-example-usage"><a class=3D"fragment-link" href=
=3D"http://www.chartjs.org/docs/#doughnut-pie-chart-example-usage">Example =
Usage</a></h3><pre><code class=3D"lang-javascript"><span class=3D"hljs-comm=
ent">// For a pie chart</span>
<span class=3D"hljs-keyword">var</span> myPieChart =3D <span class=3D"hljs-=
keyword">new</span> Chart(ctx,{
    type: <span class=3D"hljs-string">'pie'</span>,
    data: data,
    options: options
});
</code></pre>
<pre><code class=3D"lang-javascript"><span class=3D"hljs-comment">// And fo=
r a doughnut chart</span>
<span class=3D"hljs-keyword">var</span> myDoughnutChart =3D <span class=3D"=
hljs-keyword">new</span> Chart(ctx, {
    type: <span class=3D"hljs-string">'doughnut'</span>,
    data: data,
    options: options
});
</code></pre>
<h3 id=3D"doughnut-pie-chart-data-structure"><a class=3D"fragment-link" hre=
f=3D"http://www.chartjs.org/docs/#doughnut-pie-chart-data-structure">Data S=
tructure</a></h3><div class=3D"table-wrapper"><table>
<thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Usage</th>
</tr>
</thead>
<tbody>
<tr>
<td>data</td>
<td><code>Array&lt;Number&gt;</code></td>
<td>The data to plot as arcs</td>
</tr>
<tr>
<td>label</td>
<td><code>String</code></td>
<td>The label for the dataset which appears in the legend and tooltips</td>
</tr>
<tr>
<td>backgroundColor</td>
<td><code>Array&lt;Color&gt;</code></td>
<td>The fill color of the arcs. See <a href=3D"http://www.chartjs.org/docs/=
#chart-configuration-colors">Colors</a></td>
</tr>
<tr>
<td>borderColor</td>
<td><code>Array&lt;Color&gt;</code></td>
<td>Arc border color</td>
</tr>
<tr>
<td>borderWidth</td>
<td><code>Array&lt;Number&gt;</code></td>
<td>Border width of arcs in pixels</td>
</tr>
<tr>
<td>hoverBackgroundColor</td>
<td><code>Array&lt;Color&gt;</code></td>
<td>Arc background color when hovered</td>
</tr>
<tr>
<td>hoverBorderColor</td>
<td><code>Array&lt;Color&gt;</code></td>
<td>Arc border color when hovered</td>
</tr>
<tr>
<td>hoverBorderWidth</td>
<td><code>Array&lt;Number&gt;</code></td>
<td>Border width of arc when hovered</td>
</tr>
</tbody>
</table>
</div><p>An example data object using these attributes is shown below.</p>
<pre><code class=3D"lang-javascript"><span class=3D"hljs-keyword">var</span=
> data =3D {
    labels: [
        <span class=3D"hljs-string">"Red"</span>,
        <span class=3D"hljs-string">"Blue"</span>,
        <span class=3D"hljs-string">"Yellow"</span>
    ],
    datasets: [
        {
            data: [<span class=3D"hljs-number">300</span>, <span class=3D"h=
ljs-number">50</span>, <span class=3D"hljs-number">100</span>],
            backgroundColor: [
                <span class=3D"hljs-string">"#FF6384"</span>,
                <span class=3D"hljs-string">"#36A2EB"</span>,
                <span class=3D"hljs-string">"#FFCE56"</span>
            ],
            hoverBackgroundColor: [
                <span class=3D"hljs-string">"#FF6384"</span>,
                <span class=3D"hljs-string">"#36A2EB"</span>,
                <span class=3D"hljs-string">"#FFCE56"</span>
            ]
        }]
};
</code></pre>
<p>For a pie chart, datasets need to contain an array of data points. The d=
ata points should be a number, Chart.js will total all of the numbers and c=
alculate the relative proportion of each. You can also add an array of back=
ground colors. The color attributes should be a string. Similar to CSS, for=
 this string you can use HEX notation, RGB, RGBA or HSL.</p>
<h3 id=3D"doughnut-pie-chart-chart-options"><a class=3D"fragment-link" href=
=3D"http://www.chartjs.org/docs/#doughnut-pie-chart-chart-options">Chart Op=
tions</a></h3><p>These are the customisation options specific to Pie &amp; =
Doughnut charts. These options are merged with the <a href=3D"http://www.ch=
artjs.org/docs/#global-chart-configuration">global chart configuration opti=
ons</a>, and form the options of the chart.</p>
<div class=3D"table-wrapper"><table>
<thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>cutoutPercentage</td>
<td>Number</td>
<td>50 - for doughnut, 0 - for pie</td>
<td>The percentage of the chart that is cut out of the middle.</td>
</tr>
<tr>
<td>rotation</td>
<td>Number</td>
<td>-0.5 * Math.PI</td>
<td>Starting angle to draw arcs from</td>
</tr>
<tr>
<td>circumference</td>
<td>Number</td>
<td>2 * Math.PI</td>
<td>Sweep to allow arcs to cover</td>
</tr>
<tr>
<td><em>animation</em>.animateRotate</td>
<td>Boolean</td>
<td>true</td>
<td>If true, will animate the rotation of the chart.</td>
</tr>
<tr>
<td><em>animation</em>.animateScale</td>
<td>Boolean</td>
<td>false</td>
<td>If true, will animate scaling the Doughnut from the centre.</td>
</tr>
<tr>
<td><em>legend</em>.<em>labels</em>.generateLabels</td>
<td>Function</td>
<td><code>function(chart) {}</code></td>
<td>Returns a label for each item to be displayed on the legend.</td>
</tr>
<tr>
<td><em>legend</em>.onClick</td>
<td>Function</td>
<td>function(event, legendItem) {} `</td>
<td>Handles clicking an individual legend item</td>
</tr>
</tbody>
</table>
</div><p>You can override these for your <code>Chart</code> instance by pas=
sing a second argument into the <code>Doughnut</code> method as an object w=
ith the keys you want to override.</p>
<p>For example, we could have a doughnut chart that animates by scaling out=
 from the centre like so:</p>
<pre><code class=3D"lang-javascript"><span class=3D"hljs-keyword">new</span=
> Chart(ctx,{
    type:<span class=3D"hljs-string">"doughnut"</span>,
    animation:{
        animateScale:<span class=3D"hljs-literal">true</span>
    }
});
<span class=3D"hljs-comment">// This will create a chart with all of the de=
fault options, merged from the global config,</span>
<span class=3D"hljs-comment">// and the Doughnut chart defaults but this pa=
rticular instance will have `animateScale` set to `true`.</span>
</code></pre>
<p>We can also change these default values for each Doughnut type that is c=
reated, this object is available at <code>Chart.defaults.doughnut</code>. P=
ie charts also have a clone of these defaults available to change at <code>=
Chart.defaults.pie</code>, with the only difference being <code>cutoutPerce=
ntage</code> being set to 0.</p>

		</div>
	</section>

		=09
			=09
	<section id=3D"bubble-chart">
		<h2 class=3D"section-title">
			<a class=3D"fragment-link" href=3D"http://www.chartjs.org/docs/#bubble-c=
hart">Bubble Chart</a>
		</h2>
		<div class=3D"section-text">
			<h3 id=3D"bubble-chart-introduction"><a class=3D"fragment-link" href=3D"=
http://www.chartjs.org/docs/#bubble-chart-introduction">Introduction</a></h=
3><p>A bubble chart is used to display three dimensions of data at the same=
 time. The location of the bubble is determined by the first two dimensions=
 and the corresponding horizontal and vertical axes. The third dimension is=
 represented by the size of the individual bubbles. </p>
<p></p><div class=3D"canvas-holder"><iframe class=3D"chartjs-hidden-iframe"=
 style=3D"width: 100%; display: block; border: 0px; height: 0px; margin: 0p=
x; position: absolute; left: 0px; right: 0px; top: 0px; bottom: 0px;" src=
=3D"wyciwyg://frame/6"></iframe>
    <canvas width=3D"1860" height=3D"930" style=3D"display: block; width: 6=
20px; height: 310px;"></canvas>
</div>
<br><p></p>
<h3 id=3D"bubble-chart-example-usage"><a class=3D"fragment-link" href=3D"ht=
tp://www.chartjs.org/docs/#bubble-chart-example-usage">Example Usage</a></h=
3><pre><code class=3D"lang-javascript"><span class=3D"hljs-comment">// For =
a bubble chart</span>
<span class=3D"hljs-keyword">var</span> myBubbleChart =3D <span class=3D"hl=
js-keyword">new</span> Chart(ctx,{
    type: <span class=3D"hljs-string">'bubble'</span>,
    data: data,
    options: options
});
</code></pre>
<h3 id=3D"bubble-chart-data-structure"><a class=3D"fragment-link" href=3D"h=
ttp://www.chartjs.org/docs/#bubble-chart-data-structure">Data Structure</a>=
</h3><div class=3D"table-wrapper"><table>
<thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Usage</th>
</tr>
</thead>
<tbody>
<tr>
<td>data</td>
<td><code>Array&lt;BubbleDataObject&gt;</code></td>
<td>The data to plot as bubbles. See <a href=3D"http://www.chartjs.org/docs=
/#bubble-chart-data-format">Data format</a></td>
</tr>
<tr>
<td>label</td>
<td><code>String</code></td>
<td>The label for the dataset which appears in the legend and tooltips</td>
</tr>
<tr>
<td>backgroundColor</td>
<td><code>Color Array&lt;Color&gt;</code></td>
<td>The fill color of the bubbles. See <a href=3D"http://www.chartjs.org/do=
cs/#chart-configuration-colors">Colors</a></td>
</tr>
<tr>
<td>borderColor</td>
<td><code>Color or Array&lt;Color&gt;</code></td>
<td>The stroke color of the bubbles.</td>
</tr>
<tr>
<td>borderWidth</td>
<td><code>Number or Array&lt;Number&gt;</code></td>
<td>The stroke width of bubble in pixels.</td>
</tr>
<tr>
<td>hoverBackgroundColor</td>
<td><code>Color or Array&lt;Color&gt;</code></td>
<td>The fill color of the bubbles when hovered.</td>
</tr>
<tr>
<td>hoverBorderColor</td>
<td><code>Color or Array&lt;Color&gt;</code></td>
<td>The stroke color of the bubbles when hovered.</td>
</tr>
<tr>
<td>hoverBorderWidth</td>
<td><code>Number or Array&lt;Number&gt;</code></td>
<td>The stroke width of the bubbles when hovered.</td>
</tr>
<tr>
<td>hoverRadius</td>
<td><code>Number or Array&lt;Number&gt;</code></td>
<td>Additional radius to add to data radius on hover.</td>
</tr>
</tbody>
</table>
</div><p>An example data object using these attributes is shown below. This=
 example creates a single dataset with 2 different bubbles.</p>
<pre><code class=3D"lang-javascript"><span class=3D"hljs-keyword">var</span=
> data =3D {
    datasets: [
        {
            label: <span class=3D"hljs-string">'First Dataset'</span>,
            data: [
                {
                    x: <span class=3D"hljs-number">20</span>,
                    y: <span class=3D"hljs-number">30</span>,
                    r: <span class=3D"hljs-number">15</span>
                },
                {
                    x: <span class=3D"hljs-number">40</span>,
                    y: <span class=3D"hljs-number">10</span>,
                    r: <span class=3D"hljs-number">10</span>
                }
            ],
            backgroundColor:<span class=3D"hljs-string">"#FF6384"</span>,
            hoverBackgroundColor: <span class=3D"hljs-string">"#FF6384"</sp=
an>,
        }]
};
</code></pre>
<h3 id=3D"bubble-chart-data-object"><a class=3D"fragment-link" href=3D"http=
://www.chartjs.org/docs/#bubble-chart-data-object">Data Object</a></h3><p>D=
ata for the bubble chart is passed in the form of an object. The object mus=
t implement the following interface. It is important to note that the radiu=
s property, <code>r</code> is <strong>not</strong> scaled by the chart. It =
is the raw radius in pixels of the bubble that is drawn on the canvas.</p>
<pre><code class=3D"lang-javascript">{
    <span class=3D"hljs-comment">// X Value</span>
    x: &lt;Number&gt;,

    // Y Value
    y: &lt;Number&gt;,

    // Radius of bubble. This is not scaled.
    r: &lt;Number&gt;
}
</code></pre>
<h3 id=3D"bubble-chart-chart-options"><a class=3D"fragment-link" href=3D"ht=
tp://www.chartjs.org/docs/#bubble-chart-chart-options">Chart Options</a></h=
3><p>The bubble chart has no unique configuration options. To configure opt=
ions common to all of the bubbles, the point element options are used. </p>
<p>For example, to give all bubbles a 1px wide black border, the following =
options would be used.</p>
<pre><code class=3D"lang-javascript"><span class=3D"hljs-keyword">new</span=
> Chart(ctx,{
    type:<span class=3D"hljs-string">"bubble"</span>,
    options: {
        elements: {
            points: {
                borderWidth: <span class=3D"hljs-number">1</span>,
                borderColor: <span class=3D"hljs-string">'rgb(0, 0, 0)'</sp=
an>
            }
        }
    }
});
</code></pre>
<p>We can also change the default values for the Bubble chart type. Doing s=
o will give all bubble charts created after this point the new defaults. Th=
e default configuration for the bubble chart can be accessed at <code>Chart=
.defaults.bubble</code>.</p>

		</div>
	</section>

		=09
			=09
	<section id=3D"scales">
		<h2 class=3D"section-title">
			<a class=3D"fragment-link" href=3D"http://www.chartjs.org/docs/#scales">=
Scales</a>
		</h2>
		<div class=3D"section-text">
			<p>Scales in v2.0 of Chart.js are significantly more powerful, but also =
different than those of v1.0.</p>
<ul>
<li>Multiple X &amp; Y axes are supported.</li>
<li>A built-in label auto-skip feature detects would-be overlapping ticks a=
nd labels and removes every nth label to keep things displaying normally.</=
li>
<li>Scale titles are supported</li>
<li>New scale types can be extended without writing an entirely new chart t=
ype</li>
</ul>
<h3 id=3D"scales-common-configuration"><a class=3D"fragment-link" href=3D"h=
ttp://www.chartjs.org/docs/#scales-common-configuration">Common Configurati=
on</a></h3><p>Every scale extends a core scale class with the following opt=
ions:</p>
<div class=3D"table-wrapper"><table>
<thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>type</td>
<td>String</td>
<td>Chart specific.</td>
<td>Type of scale being employed. Custom scales can be created and register=
ed with a string key. Options: <a href=3D"http://www.chartjs.org/docs/#scal=
es-category-scale">"category"</a>, <a href=3D"http://www.chartjs.org/docs/#=
scales-linear-scale">"linear"</a>, <a href=3D"http://www.chartjs.org/docs/#=
scales-logarithmic-scale">"logarithmic"</a>, <a href=3D"http://www.chartjs.=
org/docs/#scales-time-scale">"time"</a>, <a href=3D"http://www.chartjs.org/=
docs/#scales-radial-linear-scale">"radialLinear"</a></td>
</tr>
<tr>
<td>display</td>
<td>Boolean</td>
<td>true</td>
<td>If true, show the scale including gridlines, ticks, and labels. Overrid=
es <em>gridLines.display</em>, <em>scaleLabel.display</em>, and <em>ticks.d=
isplay</em>.</td>
</tr>
<tr>
<td>position</td>
<td>String</td>
<td>"left"</td>
<td>Position of the scale. Possible values are 'top', 'left', 'bottom' and =
'right'.</td>
</tr>
<tr>
<td>id</td>
<td>String</td>
<td></td>
<td>The ID is used to link datasets and scale axes together. The properties=
 <code>datasets.xAxisID</code> or <code>datasets.yAxisID</code> have to mat=
ch the scale properties <code>scales.xAxes.id</code> or <code>scales.yAxes.=
id</code>. This is especially needed if multi-axes charts are used.</td>
</tr>
<tr>
<td>beforeUpdate</td>
<td>Function</td>
<td>undefined</td>
<td>Callback called before the update process starts. Passed a single argum=
ent, the scale instance.</td>
</tr>
<tr>
<td>beforeSetDimensions</td>
<td>Function</td>
<td>undefined</td>
<td>Callback that runs before dimensions are set. Passed a single argument,=
 the scale instance.</td>
</tr>
<tr>
<td>afterSetDimensions</td>
<td>Function</td>
<td>undefined</td>
<td>Callback that runs after dimensions are set. Passed a single argument, =
the scale instance.</td>
</tr>
<tr>
<td>beforeDataLimits</td>
<td>Function</td>
<td>undefined</td>
<td>Callback that runs before data limits are determined. Passed a single a=
rgument, the scale instance.</td>
</tr>
<tr>
<td>afterDataLimits</td>
<td>Function</td>
<td>undefined</td>
<td>Callback that runs after data limits are determined. Passed a single ar=
gument, the scale instance.</td>
</tr>
<tr>
<td>beforeBuildTicks</td>
<td>Function</td>
<td>undefined</td>
<td>Callback that runs before ticks are created. Passed a single argument, =
the scale instance.</td>
</tr>
<tr>
<td>afterBuildTicks</td>
<td>Function</td>
<td>undefined</td>
<td>Callback that runs after ticks are created. Useful for filtering ticks.=
 Passed a single argument, the scale instance.</td>
</tr>
<tr>
<td>beforeTickToLabelConversion</td>
<td>Function</td>
<td>undefined</td>
<td>Callback that runs before ticks are converted into strings. Passed a si=
ngle argument, the scale instance.</td>
</tr>
<tr>
<td>afterTickToLabelConversion</td>
<td>Function</td>
<td>undefined</td>
<td>Callback that runs after ticks are converted into strings. Passed a sin=
gle argument, the scale instance.</td>
</tr>
<tr>
<td>beforeCalculateTickRotation</td>
<td>Function</td>
<td>undefined</td>
<td>Callback that runs before tick rotation is determined. Passed a single =
argument, the scale instance.</td>
</tr>
<tr>
<td>afterCalculateTickRotation</td>
<td>Function</td>
<td>undefined</td>
<td>Callback that runs after tick rotation is determined. Passed a single a=
rgument, the scale instance.</td>
</tr>
<tr>
<td>beforeFit</td>
<td>Function</td>
<td>undefined</td>
<td>Callback that runs before the scale fits to the canvas. Passed a single=
 argument, the scale instance.</td>
</tr>
<tr>
<td>afterFit</td>
<td>Function</td>
<td>undefined</td>
<td>Callback that runs after the scale fits to the canvas. Passed a single =
argument, the scale instance.</td>
</tr>
<tr>
<td>afterUpdate</td>
<td>Function</td>
<td>undefined</td>
<td>Callback that runs at the end of the update process. Passed a single ar=
gument, the scale instance.</td>
</tr>
<tr>
<td><strong>gridLines</strong></td>
<td>Object</td>
<td>-</td>
<td>See <a href=3D"http://www.chartjs.org/docs/#grid-line-configuration">gr=
id line configuration</a> section.</td>
</tr>
<tr>
<td><strong>scaleLabel</strong></td>
<td>Object</td>
<td></td>
<td>See <a href=3D"http://www.chartjs.org/docs/#scale-title-configuration">=
scale title configuration</a> section.</td>
</tr>
<tr>
<td><strong>ticks</strong></td>
<td>Object</td>
<td></td>
<td>See <a href=3D"http://www.chartjs.org/docs/#ticks-configuration">ticks =
configuration</a> section.</td>
</tr>
</tbody>
</table>
</div><h4>Grid Line Configuration</h4><p>The grid line configuration is nes=
ted under the scale configuration in the <code>gridLines</code> key. It def=
ines options for the grid lines that run perpendicular to the axis.</p>
<div class=3D"table-wrapper"><table>
<thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>display</td>
<td>Boolean</td>
<td>true</td>
<td></td>
</tr>
<tr>
<td>color</td>
<td>Color or Array[Color]</td>
<td>"rgba(0, 0, 0, 0.1)"</td>
<td>Color of the grid lines.</td>
</tr>
<tr>
<td>lineWidth</td>
<td>Number or Array[Number]</td>
<td>1</td>
<td>Stroke width of grid lines</td>
</tr>
<tr>
<td>drawBorder</td>
<td>Boolean</td>
<td>true</td>
<td>If true draw border on the edge of the chart</td>
</tr>
<tr>
<td>drawOnChartArea</td>
<td>Boolean</td>
<td>true</td>
<td>If true, draw lines on the chart area inside the axis lines. This is us=
eful when there are multiple axes and you need to control which grid lines =
are drawn</td>
</tr>
<tr>
<td>drawTicks</td>
<td>Boolean</td>
<td>true</td>
<td>If true, draw lines beside the ticks in the axis area beside the chart.=
</td>
</tr>
<tr>
<td>tickMarkLength</td>
<td>Number</td>
<td>10</td>
<td>Length in pixels that the grid lines will draw into the axis area.</td>
</tr>
<tr>
<td>zeroLineWidth</td>
<td>Number</td>
<td>1</td>
<td>Stroke width of the grid line for the first index (index 0).</td>
</tr>
<tr>
<td>zeroLineColor</td>
<td>Color</td>
<td>"rgba(0, 0, 0, 0.25)"</td>
<td>Stroke color of the grid line for the first index (index 0).</td>
</tr>
<tr>
<td>offsetGridLines</td>
<td>Boolean</td>
<td>false</td>
<td>If true, labels are shifted to be between grid lines. This is used in t=
he bar chart.</td>
</tr>
</tbody>
</table>
</div><h4>Scale Title Configuration</h4><p>The grid line configuration is n=
ested under the scale configuration in the <code>scaleLabel</code> key. It =
defines options for the scale title.</p>
<div class=3D"table-wrapper"><table>
<thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>display</td>
<td>Boolean</td>
<td>false</td>
<td></td>
</tr>
<tr>
<td>labelString</td>
<td>String</td>
<td>""</td>
<td>The text for the title. (i.e. "# of People", "Response Choices")</td>
</tr>
<tr>
<td>fontColor</td>
<td>Color</td>
<td>"#666"</td>
<td>Font color for the scale title.</td>
</tr>
<tr>
<td>fontFamily</td>
<td>String</td>
<td>"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif"</td>
<td>Font family for the scale title, follows CSS font-family options.</td>
</tr>
<tr>
<td>fontSize</td>
<td>Number</td>
<td>12</td>
<td>Font size for the scale title.</td>
</tr>
<tr>
<td>fontStyle</td>
<td>String</td>
<td>"normal"</td>
<td>Font style for the scale title, follows CSS font-style options (i.e. no=
rmal, italic, oblique, initial, inherit).</td>
</tr>
</tbody>
</table>
</div><h4>Tick Configuration</h4><p>The grid line configuration is nested u=
nder the scale configuration in the <code>ticks</code> key. It defines opti=
ons for the tick marks that are generated by the axis.</p>
<div class=3D"table-wrapper"><table>
<thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>autoSkip</td>
<td>Boolean</td>
<td>true</td>
<td>If true, automatically calculates how many labels that can be shown and=
 hides labels accordingly. Turn it off to show all labels no matter what</t=
d>
</tr>
<tr>
<td>callback</td>
<td>Function</td>
<td><code>function(value) { return helpers.isArray(value) ? value : '' + va=
lue; }</code></td>
<td>Returns the string representation of the tick value as it should be dis=
played on the chart. See <a href=3D"http://www.chartjs.org/docs/#scales-cre=
ating-custom-tick-formats">callback</a> section below.</td>
</tr>
<tr>
<td>display</td>
<td>Boolean</td>
<td>true</td>
<td>If true, show the ticks.</td>
</tr>
<tr>
<td>fontColor</td>
<td>Color</td>
<td>"#666"</td>
<td>Font color for the tick labels.</td>
</tr>
<tr>
<td>fontFamily</td>
<td>String</td>
<td>"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif"</td>
<td>Font family for the tick labels, follows CSS font-family options.</td>
</tr>
<tr>
<td>fontSize</td>
<td>Number</td>
<td>12</td>
<td>Font size for the tick labels.</td>
</tr>
<tr>
<td>fontStyle</td>
<td>String</td>
<td>"normal"</td>
<td>Font style for the tick labels, follows CSS font-style options (i.e. no=
rmal, italic, oblique, initial, inherit).</td>
</tr>
<tr>
<td>labelOffset</td>
<td>Number</td>
<td>0</td>
<td>Distance in pixels to offset the label from the centre point of the tic=
k (in the y direction for the x axis, and the x direction for the y axis). =
<em>Note: this can cause labels at the edges to be cropped by the edge of t=
he canvas</em></td>
</tr>
<tr>
<td>maxRotation</td>
<td>Number</td>
<td>90</td>
<td>Maximum rotation for tick labels when rotating to condense labels. Note=
: Rotation doesn't occur until necessary. <em>Note: Only applicable to hori=
zontal scales.</em></td>
</tr>
<tr>
<td>minRotation</td>
<td>Number</td>
<td>0</td>
<td>Minimum rotation for tick labels. <em>Note: Only applicable to horizont=
al scales.</em></td>
</tr>
<tr>
<td>mirror</td>
<td>Boolean</td>
<td>false</td>
<td>Flips tick labels around axis, displaying the labels inside the chart i=
nstead of outside. <em>Note: Only applicable to vertical scales.</em></td>
</tr>
<tr>
<td>padding</td>
<td>Number</td>
<td>10</td>
<td>Padding between the tick label and the axis. <em>Note: Only applicable =
to horizontal scales.</em></td>
</tr>
<tr>
<td>reverse</td>
<td>Boolean</td>
<td>false</td>
<td>Reverses order of tick labels.</td>
</tr>
</tbody>
</table>
</div><h4>Creating Custom Tick Formats</h4><p>The <code>callback</code> met=
hod may be used for advanced tick customization. In the following example, =
every label of the Y axis would be displayed in scientific notation.</p>
<p>If the callback returns <code>null</code> or <code>undefined</code> the =
associated grid line will be hidden.</p>
<pre><code class=3D"lang-javascript"><span class=3D"hljs-keyword">var</span=
> chartInstance =3D <span class=3D"hljs-keyword">new</span> Chart(ctx, {
    type: <span class=3D"hljs-string">'line'</span>,
    data: data,
    options: {
        scales: {
            yAxes: [{
                ticks: {
                    <span class=3D"hljs-comment">// Create scientific notat=
ion labels</span>
                    callback: <span class=3D"hljs-function"><span class=3D"=
hljs-keyword">function</span>(<span class=3D"hljs-params">value, index, val=
ues</span>) </span>{
                        <span class=3D"hljs-keyword">return</span> value.to=
Exponential();
                    }
                }
            }]
        }
    }
});
</code></pre>
<h3 id=3D"scales-category-scale"><a class=3D"fragment-link" href=3D"http://=
www.chartjs.org/docs/#scales-category-scale">Category Scale</a></h3><p>The =
category scale will be familiar to those who have used v1.0. Labels are dra=
wn from one of the label arrays included in the chart data. If only <code>d=
ata.labels</code> is defined, this will be used. If <code>data.xLabels</cod=
e> is defined and the axis is horizontal, this will be used. Similarly, if =
<code>data.yLabels</code> is defined and the axis is vertical, this propert=
y will be used. Using both <code>xLabels</code> and <code>yLabels</code> to=
gether can create a chart that uses strings for both the X and Y axes.</p>
<h4>Configuration Options</h4><p>The category scale has the following addit=
ional options that can be set.</p>
<div class=3D"table-wrapper"><table>
<thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>ticks.min</td>
<td>String</td>
<td>-</td>
<td>The minimum item to display. Must be a value in the <code>labels</code>=
 array</td>
</tr>
<tr>
<td>ticks.max</td>
<td>String</td>
<td>-</td>
<td>The maximum item to display. Must be a value in the <code>labels</code>=
 array</td>
</tr>
</tbody>
</table>
</div><h3 id=3D"scales-linear-scale"><a class=3D"fragment-link" href=3D"htt=
p://www.chartjs.org/docs/#scales-linear-scale">Linear Scale</a></h3><p>The =
linear scale is use to chart numerical data. It can be placed on either the=
 x or y axis. The scatter chart type automatically configures a line chart =
to use one of these scales for the x axis. As the name suggests, linear int=
erpolation is used to determine where a value lies on the axis.</p>
<h4>Configuration Options</h4><p>The following options are provided by the =
linear scale. They are all located in the <code>ticks</code> sub options.</=
p>
<div class=3D"table-wrapper"><table>
<thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>beginAtZero</td>
<td>Boolean</td>
<td>-</td>
<td>if true, scale will inclulde 0 if it is not already included.</td>
</tr>
<tr>
<td>min</td>
<td>Number</td>
<td>-</td>
<td>User defined minimum number for the scale, overrides minimum value from=
 data.</td>
</tr>
<tr>
<td>max</td>
<td>Number</td>
<td>-</td>
<td>User defined maximum number for the scale, overrides maximum value from=
 data.</td>
</tr>
<tr>
<td>maxTicksLimit</td>
<td>Number</td>
<td>11</td>
<td>Maximum number of ticks and gridlines to show. If not defined, it will =
limit to 11 ticks but will show all gridlines.</td>
</tr>
<tr>
<td>fixedStepSize</td>
<td>Number</td>
<td>-</td>
<td>User defined fixed step size for the scale. If set, the scale ticks wil=
l be enumerated by multiple of stepSize, having one tick per increment. If =
not set, the ticks are labeled automatically using the nice numbers algorit=
hm.</td>
</tr>
<tr>
<td>stepSize</td>
<td>Number</td>
<td>-</td>
<td>if defined, it can be used along with the min and the max to give a cus=
tom number of steps. See the example below.</td>
</tr>
<tr>
<td>suggestedMax</td>
<td>Number</td>
<td>-</td>
<td>User defined maximum number for the scale, overrides maximum value <em>=
except for if</em> it is lower than the maximum value.</td>
</tr>
<tr>
<td>suggestedMin</td>
<td>Number</td>
<td>-</td>
<td>User defined minimum number for the scale, overrides minimum value <em>=
except for if</em> it is higher than the minimum value.</td>
</tr>
</tbody>
</table>
</div><h4>Example Configuration</h4><p>The following example creates a line=
 chart with a vertical axis that goes from 0 to 5 in 0.5 sized steps.</p>
<pre><code class=3D"lang-javascript"><span class=3D"hljs-keyword">var</span=
> chartInstance =3D <span class=3D"hljs-keyword">new</span> Chart(ctx, {
    type: <span class=3D"hljs-string">'line'</span>,
    data: data,
    options: {
        scales: {
            yAxes: [{
                ticks: {
                    max: <span class=3D"hljs-number">5</span>,
                    min: <span class=3D"hljs-number">0</span>,
                    stepSize: <span class=3D"hljs-number">0.5</span>
                }
            }]
        }
    }
});
</code></pre>
<h3 id=3D"scales-logarithmic-scale"><a class=3D"fragment-link" href=3D"http=
://www.chartjs.org/docs/#scales-logarithmic-scale">Logarithmic Scale</a></h=
3><p>The logarithmic scale is use to chart numerical data. It can be placed=
 on either the x or y axis. As the name suggests, logarithmic interpolation=
 is used to determine where a value lies on the axis.</p>
<h4>Configuration Options</h4><p>The following options are provided by the =
logarithmic scale. They are all located in the <code>ticks</code> sub optio=
ns.</p>
<div class=3D"table-wrapper"><table>
<thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>min</td>
<td>Number</td>
<td>-</td>
<td>User defined minimum number for the scale, overrides minimum value from=
 data.</td>
</tr>
<tr>
<td>max</td>
<td>Number</td>
<td>-</td>
<td>User defined maximum number for the scale, overrides maximum value from=
 data.</td>
</tr>
</tbody>
</table>
</div><h4>Example Configuration</h4><p>The following example creates a char=
t with a logarithmic X axis that ranges from 1 to 1000.</p>
<pre><code class=3D"lang-javascript"><span class=3D"hljs-keyword">var</span=
> chartInstance =3D <span class=3D"hljs-keyword">new</span> Chart(ctx, {
    type: <span class=3D"hljs-string">'line'</span>,
    data: data,
    options: {
        scales: {
            xAxes: [{
                type: <span class=3D"hljs-string">'logarithmic'</span>,
                position: <span class=3D"hljs-string">'bottom'</span>,
                ticks: {
                    min: <span class=3D"hljs-number">1</span>,
                    max: <span class=3D"hljs-number">1000</span>
                }
            }]
        }
    }
})
</code></pre>
<h3 id=3D"scales-time-scale"><a class=3D"fragment-link" href=3D"http://www.=
chartjs.org/docs/#scales-time-scale">Time Scale</a></h3><p>The time scale i=
s used to display times and dates. It can only be placed on the X axis. Whe=
n building its ticks, it will automatically calculate the most comfortable =
unit base on the size of the scale.</p>
<h4>Configuration Options</h4><p>The following options are provided by the =
logarithmic scale. They are all located in the <code>time</code> sub option=
s.</p>
<div class=3D"table-wrapper"><table>
<thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>displayFormats</td>
<td>Object</td>
<td>-</td>
<td>See <a href=3D"http://www.chartjs.org/docs/#scales-display-formats">Dis=
play Formats</a> section below.</td>
</tr>
<tr>
<td>isoWeekday</td>
<td>Boolean</td>
<td>false</td>
<td>If true and the unit is set to 'week', iso weekdays will be used.</td>
</tr>
<tr>
<td>max</td>
<td><a href=3D"http://www.chartjs.org/docs/#scales-date-formats">Time</a></=
td>
<td>-</td>
<td>If defined, this will override the data maximum</td>
</tr>
<tr>
<td>min</td>
<td><a href=3D"http://www.chartjs.org/docs/#scales-date-formats">Time</a></=
td>
<td>-</td>
<td>If defined, this will override the data minimum</td>
</tr>
<tr>
<td>parser</td>
<td>String or Function</td>
<td>-</td>
<td>If defined as a string, it is interpreted as a custom format to be used=
 by moment to parse the date. If this is a function, it must return a momen=
t.js object given the appropriate data value.</td>
</tr>
<tr>
<td>round</td>
<td>String</td>
<td>-</td>
<td>If defined, dates will be rounded to the start of this unit. See <a hre=
f=3D"http://www.chartjs.org/docs/#scales-time-units">Time Units</a> below f=
or the allowed units.</td>
</tr>
<tr>
<td>tooltipFormat</td>
<td>String</td>
<td>''</td>
<td>The moment js format string to use for the tooltip.</td>
</tr>
<tr>
<td>unit</td>
<td>String</td>
<td>-</td>
<td>If defined, will force the unit to be a certain type. See <a href=3D"ht=
tp://www.chartjs.org/docs/#scales-time-units">Time Units</a> section below =
for details.</td>
</tr>
<tr>
<td>unitStepSize</td>
<td>Number</td>
<td>1</td>
<td>The number of units between grid lines.</td>
</tr>
</tbody>
</table>
</div><h4>Date Formats</h4><p>When providing data for the time scale, Chart=
.js supports all of the formats that Moment.js accepts. See <a href=3D"http=
://momentjs.com/docs/#/parsing/" target=3D"_blank">Moment.js docs</a> for d=
etails.</p>
<h4>Display Formats</h4><p>The following display formats are used to config=
ure how different time units are formed into strings for the axis tick mark=
s. See <a href=3D"http://momentjs.com/docs/#/displaying/format/" target=3D"=
_blank">moment.js</a> for the allowable format strings.</p>
<div class=3D"table-wrapper"><table>
<thead>
<tr>
<th>Name</th>
<th>Default</th>
</tr>
</thead>
<tbody>
<tr>
<td>millisecond</td>
<td>'SSS [ms]'</td>
</tr>
<tr>
<td>second</td>
<td>'h:mm:ss a'</td>
</tr>
<tr>
<td>minute</td>
<td>'h:mm:ss a'</td>
</tr>
<tr>
<td>hour</td>
<td>'MMM D, hA'</td>
</tr>
<tr>
<td>day</td>
<td>'ll'</td>
</tr>
<tr>
<td>week</td>
<td>'ll'</td>
</tr>
<tr>
<td>month</td>
<td>'MMM YYYY'</td>
</tr>
<tr>
<td>quarter</td>
<td>'[Q]Q - YYYY'</td>
</tr>
<tr>
<td>year</td>
<td>'YYYY'</td>
</tr>
</tbody>
</table>
</div><p>For example, to set the display format for the 'quarter' unit to s=
how the month and year, the following config would be passed to the chart c=
onstructor.</p>
<pre><code class=3D"lang-javascript"><span class=3D"hljs-keyword">var</span=
> chartInstance =3D <span class=3D"hljs-keyword">new</span> Chart(ctx, {
    type: <span class=3D"hljs-string">'line'</span>,
    data: data,
    options: {
        scales: {
            xAxes: [{
                type: <span class=3D"hljs-string">'time'</span>,
                time: {
                    displayFormats: {
                        quarter: <span class=3D"hljs-string">'MMM YYYY'</sp=
an>
                    }
                }
            }]
        }
    }
})
</code></pre>
<h4>Time Units</h4><p>The following time measurements are supported. The na=
mes can be passed as strings to the <code>time.unit</code> config option to=
 force a certain unit.</p>
<ul>
<li>millisecond</li>
<li>second</li>
<li>minute</li>
<li>hour</li>
<li>day</li>
<li>week</li>
<li>month</li>
<li>quarter</li>
<li>year</li>
</ul>
<p>For example, to create a chart with a time scale that always displayed u=
nits per month, the following config could be used.</p>
<pre><code class=3D"lang-javascript"><span class=3D"hljs-keyword">var</span=
> chartInstance =3D <span class=3D"hljs-keyword">new</span> Chart(ctx, {
    type: <span class=3D"hljs-string">'line'</span>,
    data: data,
    options: {
        scales: {
            xAxes: [{
                time: {
                    unit: <span class=3D"hljs-string">'month'</span>
                }
            }]
        }
    }
})
</code></pre>
<h3 id=3D"scales-radial-linear-scale"><a class=3D"fragment-link" href=3D"ht=
tp://www.chartjs.org/docs/#scales-radial-linear-scale">Radial Linear Scale<=
/a></h3><p>The radial linear scale is used specifically for the radar and p=
olar are chart types. It overlays the chart area, rather than being positio=
ned on one of the edges.</p>
<h4>Configuration Options</h4><p>The following additional configuration opt=
ions are provided by the radial linear scale.</p>
<div class=3D"table-wrapper"><table>
<thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>lineArc</td>
<td>Boolean</td>
<td>false</td>
<td>If true, circular arcs are used else straight lines are used. The forme=
r is used by the polar area chart and the latter by the radar chart</td>
</tr>
<tr>
<td>angleLines</td>
<td>Object</td>
<td>-</td>
<td>See the Angle Line Options section below for details.</td>
</tr>
<tr>
<td>pointLabels</td>
<td>Object</td>
<td>-</td>
<td>See the Point Label Options section below for details.</td>
</tr>
<tr>
<td>ticks</td>
<td>Object</td>
<td>-</td>
<td>See the Ticks table below for options.</td>
</tr>
</tbody>
</table>
</div><h4>Angle Line Options</h4><p>The following options are used to confi=
gure angled lines that radiate from the center of the chart to the point la=
bels. They can be found in the <code>angleLines</code> sub options. Note th=
at these options only apply if <code>lineArc</code> is false.</p>
<div class=3D"table-wrapper"><table>
<thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>display</td>
<td>Boolean</td>
<td>true</td>
<td>If true, angle lines are shown.</td>
</tr>
<tr>
<td>color</td>
<td>Color</td>
<td>'rgba(0, 0, 0, 0.1)'</td>
<td>Color of angled lines</td>
</tr>
<tr>
<td>lineWidth</td>
<td>Number</td>
<td>1</td>
<td>Width of angled lines</td>
</tr>
</tbody>
</table>
</div><h4>Point Label Options</h4><p>The following options are used to conf=
igure the point labels that are shown on the perimeter of the scale. They c=
an be found in the <code>pointLabels</code> sub options. Note that these op=
tions only apply if <code>lineArc</code> is false.</p>
<div class=3D"table-wrapper"><table>
<thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>callback</td>
<td>Function</td>
<td>-</td>
<td>Callback function to transform data label to axis label</td>
</tr>
<tr>
<td>fontColor</td>
<td>Color</td>
<td>'#666'</td>
<td>Font color</td>
</tr>
<tr>
<td>fontFamily</td>
<td>String</td>
<td>"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif"</td>
<td>Font family to render</td>
</tr>
<tr>
<td>fontSize</td>
<td>Number</td>
<td>10</td>
<td>Font size in pixels</td>
</tr>
<tr>
<td>fontStyle</td>
<td>String</td>
<td>'normal'</td>
<td>Font Style to use</td>
</tr>
</tbody>
</table>
</div><h4>Tick Options</h4><div class=3D"table-wrapper"><table>
<thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>backdropColor</td>
<td>Color</td>
<td>'rgba(255, 255, 255, 0.75)'</td>
<td>Color of label backdrops</td>
</tr>
<tr>
<td>backdropPaddingX</td>
<td>Number</td>
<td>2</td>
<td>Horizontal padding of label backdrop</td>
</tr>
<tr>
<td>backdropPaddingY</td>
<td>Number</td>
<td>2</td>
<td>Vertical padding of label backdrop</td>
</tr>
<tr>
<td>beginAtZero</td>
<td>Boolean</td>
<td>-</td>
<td>if true, scale will inclulde 0 if it is not already included.</td>
</tr>
<tr>
<td>min</td>
<td>Number</td>
<td>-</td>
<td>User defined minimum number for the scale, overrides minimum value from=
 data.</td>
</tr>
<tr>
<td>max</td>
<td>Number</td>
<td>-</td>
<td>User defined maximum number for the scale, overrides maximum value from=
 data.</td>
</tr>
<tr>
<td>maxTicksLimit</td>
<td>Number</td>
<td>11</td>
<td>Maximum number of ticks and gridlines to show. If not defined, it will =
limit to 11 ticks but will show all gridlines.</td>
</tr>
<tr>
<td>showLabelBackdrop</td>
<td>Boolean</td>
<td>true</td>
<td>If true, draw a background behind the tick labels</td>
</tr>
<tr>
<td>stepSize</td>
<td>Number</td>
<td>-</td>
<td>User defined fixed step size for the scale. If set, the scale ticks wil=
l be enumerated by multiple of stepSize, having one tick per increment. If =
not set, the ticks are labeled automatically using the nice numbers algorit=
hm.</td>
</tr>
<tr>
<td>stepSize</td>
<td>Number</td>
<td>-</td>
<td>if defined, it can be used along with the min and the max to give a cus=
tom number of steps. See the example below.</td>
</tr>
<tr>
<td>suggestedMax</td>
<td>Number</td>
<td>-</td>
<td>User defined maximum number for the scale, overrides maximum value <em>=
except for if</em> it is lower than the maximum value.</td>
</tr>
<tr>
<td>suggestedMin</td>
<td>Number</td>
<td>-</td>
<td>User defined minimum number for the scale, overrides minimum value <em>=
except for if</em> it is higher than the minimum value.</td>
</tr>
</tbody>
</table>
</div><h3 id=3D"scales-update-default-scale-config"><a class=3D"fragment-li=
nk" href=3D"http://www.chartjs.org/docs/#scales-update-default-scale-config=
">Update Default Scale config</a></h3><p>The default configuration for a sc=
ale can be easily changed using the scale service. Pass in a partial config=
uration that will be merged with the current scale default configuration.</=
p>
<p>For example, to set the minimum value of 0 for all linear scales, you wo=
uld do the following. Any linear scales created after this time would now h=
ave a minimum of 0.</p>
<pre><code>Chart.scaleService.updateScaleDefaults('linear', {
    ticks: {
        min: 0
    }
})
</code></pre>
		</div>
	</section>

		=09
			=09
	<section id=3D"advanced-usage">
		<h2 class=3D"section-title">
			<a class=3D"fragment-link" href=3D"http://www.chartjs.org/docs/#advanced=
-usage">Advanced usage</a>
		</h2>
		<div class=3D"section-text">
			<h3 id=3D"advanced-usage-prototype-methods"><a class=3D"fragment-link" h=
ref=3D"http://www.chartjs.org/docs/#advanced-usage-prototype-methods">Proto=
type Methods</a></h3><p>For each chart, there are a set of global prototype=
 methods on the shared <code>ChartType</code> which you may find useful. Th=
ese are available on all charts created with Chart.js, but for the examples=
, let's use a line chart we've made.</p>
<pre><code class=3D"lang-javascript"><span class=3D"hljs-comment">// For ex=
ample:</span>
<span class=3D"hljs-keyword">var</span> myLineChart =3D <span class=3D"hljs=
-keyword">new</span> Chart(ctx, config);
</code></pre>
<h4>.destroy()</h4><p>Use this to destroy any chart instances that are crea=
ted. This will clean up any references stored to the chart object within Ch=
art.js, along with any associated event listeners attached by Chart.js.
This must be called before the canvas is reused for a new chart.</p>
<pre><code class=3D"lang-javascript"><span class=3D"hljs-comment">// Destro=
ys a specific chart instance</span>
myLineChart.destroy();
</code></pre>
<h4>.update(duration, lazy)</h4><p>Triggers an update of the chart. This ca=
n be safely called after replacing the entire data object. This will update=
 all scales, legends, and then re-render the chart.</p>
<pre><code class=3D"lang-javascript"><span class=3D"hljs-comment">// durati=
on is the time for the animation of the redraw in miliseconds</span>
<span class=3D"hljs-comment">// lazy is a boolean. if true, the animation c=
an be interupted by other animations</span>
myLineChart.data.datasets[<span class=3D"hljs-number">0</span>].data[<span =
class=3D"hljs-number">2</span>] =3D <span class=3D"hljs-number">50</span>; =
<span class=3D"hljs-comment">// Would update the first dataset's value of '=
March' to be 50</span>
myLineChart.update(); <span class=3D"hljs-comment">// Calling update now an=
imates the position of March from 90 to 50.</span>
</code></pre>
<h4>.render(duration, lazy)</h4><p>Triggers a redraw of all chart elements.=
 Note, this does not update elements for new data. Use <code>.update()</cod=
e> in that case.</p>
<pre><code class=3D"lang-javascript"><span class=3D"hljs-comment">// durati=
on is the time for the animation of the redraw in miliseconds</span>
<span class=3D"hljs-comment">// lazy is a boolean. if true, the animation c=
an be interupted by other animations</span>
myLineChart.render(duration, lazy);
</code></pre>
<h4>.stop()</h4><p>Use this to stop any current animation loop. This will p=
ause the chart during any current animation frame. Call <code>.render()</co=
de> to re-animate.</p>
<pre><code class=3D"lang-javascript"><span class=3D"hljs-comment">// Stops =
the charts animation loop at its current frame</span>
myLineChart.stop();
<span class=3D"hljs-comment">// =3D&gt; returns 'this' for chainability</sp=
an>
</code></pre>
<h4>.resize()</h4><p>Use this to manually resize the canvas element. This i=
s run each time the canvas container is resized, but you can call this meth=
od manually if you change the size of the canvas nodes container element.</=
p>
<pre><code class=3D"lang-javascript"><span class=3D"hljs-comment">// Resize=
s &amp; redraws to fill its container element</span>
myLineChart.resize();
<span class=3D"hljs-comment">// =3D&gt; returns 'this' for chainability</sp=
an>
</code></pre>
<h4>.clear()</h4><p>Will clear the chart canvas. Used extensively internall=
y between animation frames, but you might find it useful.</p>
<pre><code class=3D"lang-javascript"><span class=3D"hljs-comment">// Will c=
lear the canvas that myLineChart is drawn on</span>
myLineChart.clear();
<span class=3D"hljs-comment">// =3D&gt; returns 'this' for chainability</sp=
an>
</code></pre>
<h4>.toBase64Image()</h4><p>This returns a base 64 encoded string of the ch=
art in it's current state.</p>
<pre><code class=3D"lang-javascript">myLineChart.toBase64Image();
<span class=3D"hljs-comment">// =3D&gt; returns png data url of the image o=
n the canvas</span>
</code></pre>
<h4>.generateLegend()</h4><p>Returns an HTML string of a legend for that ch=
art. The legend is generated from the <code>legendCallback</code> in the op=
tions.</p>
<pre><code class=3D"lang-javascript">myLineChart.generateLegend();
<span class=3D"hljs-comment">// =3D&gt; returns HTML string of a legend for=
 this chart</span>
</code></pre>
<h4>.getElementAtEvent(e)</h4><p>Calling <code>getElementAtEvent(event)</co=
de> on your Chart instance passing an argument of an event, or jQuery event=
, will return the single element at the event position. If there are multip=
le items within range, only the first is returned</p>
<pre><code class=3D"lang-javascript">myLineChart.getElementAtEvent(e);
<span class=3D"hljs-comment">// =3D&gt; returns the first element at the ev=
ent point.</span>
</code></pre>
<h4>.getElementsAtEvent(e)</h4><p>Looks for the element under the event poi=
nt, then returns all elements at the same data index. This is used internal=
ly for 'label' mode highlighting.</p>
<p>Calling <code>getElementsAtEvent(event)</code> on your Chart instance pa=
ssing an argument of an event, or jQuery event, will return the point eleme=
nts that are at that the same position of that event.</p>
<pre><code class=3D"lang-javascript">canvas.onclick =3D <span class=3D"hljs=
-function"><span class=3D"hljs-keyword">function</span>(<span class=3D"hljs=
-params">evt</span>)</span>{
    <span class=3D"hljs-keyword">var</span> activePoints =3D myLineChart.ge=
tElementsAtEvent(evt);
    <span class=3D"hljs-comment">// =3D&gt; activePoints is an array of poi=
nts on the canvas that are at the same position as the click event.</span>
};
</code></pre>
<p>This functionality may be useful for implementing DOM based tooltips, or=
 triggering custom behaviour in your application.</p>
<h4>.getDatasetAtEvent(e)</h4><p>Looks for the element under the event poin=
t, then returns all elements from that dataset. This is used internally for=
 'dataset' mode highlighting</p>
<pre><code class=3D"lang-javascript">myLineChart.getDatasetAtEvent(e);
<span class=3D"hljs-comment">// =3D&gt; returns an array of elements</span>
</code></pre>
<h3 id=3D"advanced-usage-external-tooltips"><a class=3D"fragment-link" href=
=3D"http://www.chartjs.org/docs/#advanced-usage-external-tooltips">External=
 Tooltips</a></h3><p>You can enable custom tooltips in the global or chart =
configuration like so:</p>
<pre><code class=3D"lang-javascript"><span class=3D"hljs-keyword">var</span=
> myPieChart =3D <span class=3D"hljs-keyword">new</span> Chart(ctx, {
    type: <span class=3D"hljs-string">'pie'</span>,
    data: data,
    options: {
        tooltips: {
            custom: <span class=3D"hljs-function"><span class=3D"hljs-keywo=
rd">function</span>(<span class=3D"hljs-params">tooltip</span>) </span>{
                <span class=3D"hljs-comment">// tooltip will be false if to=
oltip is not visible or should be hidden</span>
                <span class=3D"hljs-keyword">if</span> (!tooltip) {
                    <span class=3D"hljs-keyword">return</span>;
                }

                <span class=3D"hljs-comment">// Otherwise, tooltip will be =
an object with all tooltip properties like:</span>

                <span class=3D"hljs-comment">// tooltip.caretSize</span>
                <span class=3D"hljs-comment">// tooltip.caretPadding</span>
                <span class=3D"hljs-comment">// tooltip.chart</span>
                <span class=3D"hljs-comment">// tooltip.cornerRadius</span>
                <span class=3D"hljs-comment">// tooltip.fillColor</span>
                <span class=3D"hljs-comment">// tooltip.font...</span>
                <span class=3D"hljs-comment">// tooltip.text</span>
                <span class=3D"hljs-comment">// tooltip.x</span>
                <span class=3D"hljs-comment">// tooltip.y</span>
                <span class=3D"hljs-comment">// etc...</span>
            }
        }
    }
});
</code></pre>
<p>See <code>sample/line-customTooltips.html</code> for examples on how to =
get started.</p>
<h3 id=3D"advanced-usage-writing-new-scale-types"><a class=3D"fragment-link=
" href=3D"http://www.chartjs.org/docs/#advanced-usage-writing-new-scale-typ=
es">Writing New Scale Types</a></h3><p>Starting with Chart.js 2.0 scales ca=
n be individually extended. Scales should always derive from Chart.Scale.</=
p>
<pre><code class=3D"lang-javascript"><span class=3D"hljs-keyword">var</span=
> MyScale =3D Chart.Scale.extend({
    <span class=3D"hljs-comment">/* extensions ... */</span>
});

<span class=3D"hljs-comment">// MyScale is now derived from Chart.Scale</sp=
an>
</code></pre>
<p>Once you have created your scale class, you need to register it with the=
 global chart object so that it can be used. A default config for the scale=
 may be provided when registering the constructor. The first parameter to t=
he register function is a string key that is used later to identify which s=
cale type to use for a chart.</p>
<pre><code class=3D"lang-javascript">Chart.scaleService.registerScaleType(<=
span class=3D"hljs-string">'myScale'</span>, MyScale, defaultConfigObject);
</code></pre>
<p>To use the new scale, simply pass in the string key to the config when c=
reating a chart.</p>
<pre><code class=3D"lang-javascript"><span class=3D"hljs-keyword">var</span=
> lineChart =3D <span class=3D"hljs-keyword">new</span> Chart(ctx, {
    data: data,
    type: <span class=3D"hljs-string">'line'</span>,
    options: {
        scales: {
            yAxes: [{
                type: <span class=3D"hljs-string">'myScale'</span> <span cl=
ass=3D"hljs-comment">// this is the same key that was passed to the registe=
rScaleType function</span>
            }]
        }
    }
})
</code></pre>
<h4>Scale Properties</h4><p>Scale instances are given the following propert=
ies during the fitting process.</p>
<pre><code class=3D"lang-javascript">{
    left: <span class=3D"hljs-built_in">Number</span>, <span class=3D"hljs-=
comment">// left edge of the scale bounding box</span>
    right: <span class=3D"hljs-built_in">Number</span>, <span class=3D"hljs=
-comment">// right edge of the bounding box'</span>
    top: <span class=3D"hljs-built_in">Number</span>,=20
    bottom: <span class=3D"hljs-built_in">Number</span>,
    width: <span class=3D"hljs-built_in">Number</span>, <span class=3D"hljs=
-comment">// the same as right - left</span>
    height: <span class=3D"hljs-built_in">Number</span>, <span class=3D"hlj=
s-comment">// the same as bottom - top</span>

    <span class=3D"hljs-comment">// Margin on each side. Like css, this is =
outside the bounding box. </span>
    margins: {
        left: <span class=3D"hljs-built_in">Number</span>,
        right: <span class=3D"hljs-built_in">Number</span>,
        top: <span class=3D"hljs-built_in">Number</span>,
        bottom: <span class=3D"hljs-built_in">Number</span>,
    },

    <span class=3D"hljs-comment">// Amount of padding on the inside of the =
bounding box (like CSS)</span>
    paddingLeft: <span class=3D"hljs-built_in">Number</span>,
    paddingRight: <span class=3D"hljs-built_in">Number</span>,
    paddingTop: <span class=3D"hljs-built_in">Number</span>,
    paddingBottom: <span class=3D"hljs-built_in">Number</span>,
}
</code></pre>
<h4>Scale Interface</h4><p>To work with Chart.js, custom scale types must i=
mplement the following interface. </p>
<pre><code class=3D"lang-javascript">{
    <span class=3D"hljs-comment">// Determines the data limits. Should set =
this.min and this.max to be the data max/min</span>
    determineDataLimits: <span class=3D"hljs-function"><span class=3D"hljs-=
keyword">function</span>(<span class=3D"hljs-params"></span>) </span>{},

    <span class=3D"hljs-comment">// Generate tick marks. this.chart is the =
chart instance. The data object can be accessed as this.chart.data</span>
    <span class=3D"hljs-comment">// buildTicks() should create a ticks arra=
y on the axis instance, if you intend to use any of the implementations fro=
m the base class</span>
    buildTicks: <span class=3D"hljs-function"><span class=3D"hljs-keyword">=
function</span>(<span class=3D"hljs-params"></span>) </span>{},

    <span class=3D"hljs-comment">// Get the value to show for the data at t=
he given index of the the given dataset, ie this.chart.data.datasets[datase=
tIndex].data[index]</span>
    getLabelForIndex: <span class=3D"hljs-function"><span class=3D"hljs-key=
word">function</span>(<span class=3D"hljs-params">index, datasetIndex</span=
>) </span>{},

    <span class=3D"hljs-comment">// Get the pixel (x coordinate for horizon=
tal axis, y coordinate for vertical axis) for a given value</span>
    <span class=3D"hljs-comment">// @param index: index into the ticks arra=
y</span>
    <span class=3D"hljs-comment">// @param includeOffset: if true, get the =
pixel halway between the given tick and the next</span>
    getPixelForTick: <span class=3D"hljs-function"><span class=3D"hljs-keyw=
ord">function</span>(<span class=3D"hljs-params">index, includeOffset</span=
>) </span>{},

    <span class=3D"hljs-comment">// Get the pixel (x coordinate for horizon=
tal axis, y coordinate for vertical axis) for a given value</span>
    <span class=3D"hljs-comment">// @param value : the value to get the pix=
el for</span>
    <span class=3D"hljs-comment">// @param index : index into the data arra=
y of the value</span>
    <span class=3D"hljs-comment">// @param datasetIndex : index of the data=
set the value comes from</span>
    <span class=3D"hljs-comment">// @param includeOffset : if true, get the=
 pixel halway between the given tick and the next</span>
    getPixelForValue: <span class=3D"hljs-function"><span class=3D"hljs-key=
word">function</span>(<span class=3D"hljs-params">value, index, datasetInde=
x, includeOffset</span>) </span>{}

    <span class=3D"hljs-comment">// Get the value for a given pixel (x coor=
dinate for horizontal axis, y coordinate for vertical axis)</span>
    <span class=3D"hljs-comment">// @param pixel : pixel value</span>
    getValueForPixel: <span class=3D"hljs-function"><span class=3D"hljs-key=
word">function</span>(<span class=3D"hljs-params">pixel</span>) </span>{}
}
</code></pre>
<p>Optionally, the following methods may also be overwritten, but an implem=
entation is already provided by the <code>Chart.Scale</code> base class.</p=
>
<pre><code class=3D"lang-javascript">    <span class=3D"hljs-comment">// Tr=
ansform the ticks array of the scale instance into strings. The default imp=
lementation simply calls this.options.ticks.callback(numericalTick, index, =
ticks); </span>
    convertTicksToLabels: <span class=3D"hljs-function"><span class=3D"hljs=
-keyword">function</span>(<span class=3D"hljs-params"></span>) </span>{},

    <span class=3D"hljs-comment">// Determine how much the labels will rota=
te by. The default implementation will only rotate labels if the scale is h=
orizontal. </span>
    calculateTickRotation: <span class=3D"hljs-function"><span class=3D"hlj=
s-keyword">function</span>(<span class=3D"hljs-params"></span>) </span>{},

    <span class=3D"hljs-comment">// Fits the scale into the canvas.</span>
    <span class=3D"hljs-comment">// this.maxWidth and this.maxHeight will t=
ell you the maximum dimensions the scale instance can be. Scales should end=
eavour to be as efficient as possible with canvas space.</span>
    <span class=3D"hljs-comment">// this.margins is the amount of space you=
 have on either side of your scale that you may expand in to. This is used =
already for calculating the best label rotation</span>
    <span class=3D"hljs-comment">// You must set this.minSize to be the siz=
e of your scale. It must be an object containing 2 properties: width and he=
ight.</span>
    <span class=3D"hljs-comment">// You must set this.width to be the width=
 and this.height to be the height of the scale</span>
    fit: <span class=3D"hljs-function"><span class=3D"hljs-keyword">functio=
n</span>(<span class=3D"hljs-params"></span>) </span>{},

    <span class=3D"hljs-comment">// Draws the scale onto the canvas. this.(=
left|right|top|bottom) will have been populated to tell you the area on the=
 canvas to draw in</span>
    <span class=3D"hljs-comment">// @param chartArea : an object containing=
 four properties: left, right, top, bottom. This is the rectangle that line=
s, bars, etc will be drawn in. It may be used, for example, to draw grid li=
nes.</span>
    draw: <span class=3D"hljs-function"><span class=3D"hljs-keyword">functi=
on</span>(<span class=3D"hljs-params">chartArea</span>) </span>{},
</code></pre>
<p>The Core.Scale base class also has some utility functions that you may f=
ind useful.</p>
<pre><code class=3D"lang-javascript">{   =20
    <span class=3D"hljs-comment">// Returns true if the scale instance is h=
orizontal</span>
    isHorizontal: <span class=3D"hljs-function"><span class=3D"hljs-keyword=
">function</span>(<span class=3D"hljs-params"></span>) </span>{},

    <span class=3D"hljs-comment">// Get the correct value from the value fr=
om this.chart.data.datasets[x].data[]</span>
    <span class=3D"hljs-comment">// If dataValue is an object, returns .x o=
r .y depending on the return of isHorizontal()</span>
    <span class=3D"hljs-comment">// If the value is undefined, returns NaN<=
/span>
    <span class=3D"hljs-comment">// Otherwise returns the value.</span>
    <span class=3D"hljs-comment">// Note that in all cases, the returned va=
lue is not guaranteed to be a Number</span>
    getRightValue: <span class=3D"hljs-function"><span class=3D"hljs-keywor=
d">function</span>(<span class=3D"hljs-params">dataValue</span>) </span>{},
}
</code></pre>
<h3 id=3D"advanced-usage-writing-new-chart-types"><a class=3D"fragment-link=
" href=3D"http://www.chartjs.org/docs/#advanced-usage-writing-new-chart-typ=
es">Writing New Chart Types</a></h3><p>Chart.js 2.0 introduces the concept =
of controllers for each dataset. Like scales, new controllers can be writte=
n as needed.</p>
<pre><code class=3D"lang-javascript">Chart.controllers.MyType =3D Chart.Dat=
asetController.extend({

});


<span class=3D"hljs-comment">// Now we can create a new instance of our cha=
rt, using the Chart.js API</span>
<span class=3D"hljs-keyword">new</span> Chart(ctx, {
    <span class=3D"hljs-comment">// this is the string the constructor was =
registered at, ie Chart.controllers.MyType</span>
    type: <span class=3D"hljs-string">'MyType'</span>,
    data: data,
    options: options
});
</code></pre>
<h4>Dataset Controller Interface</h4><p>Dataset controllers must implement =
the following interface.</p>
<pre><code class=3D"lang-javascript">{
    <span class=3D"hljs-comment">// Create elements for each piece of data =
in the dataset. Store elements in an array on the dataset as dataset.metaDa=
ta</span>
    addElements: <span class=3D"hljs-function"><span class=3D"hljs-keyword"=
>function</span>(<span class=3D"hljs-params"></span>) </span>{},

    <span class=3D"hljs-comment">// Create a single element for the data at=
 the given index and reset its state</span>
    addElementAndReset: <span class=3D"hljs-function"><span class=3D"hljs-k=
eyword">function</span>(<span class=3D"hljs-params">index</span>) </span>{}=
,

    <span class=3D"hljs-comment">// Draw the representation of the dataset<=
/span>
    <span class=3D"hljs-comment">// @param ease : if specified, this number=
 represents how far to transition elements. See the implementation of draw(=
) in any of the provided controllers to see how this should be used</span>
    draw: <span class=3D"hljs-function"><span class=3D"hljs-keyword">functi=
on</span>(<span class=3D"hljs-params">ease</span>) </span>{},

    <span class=3D"hljs-comment">// Remove hover styling from the given ele=
ment</span>
    removeHoverStyle: <span class=3D"hljs-function"><span class=3D"hljs-key=
word">function</span>(<span class=3D"hljs-params">element</span>) </span>{}=
,

    <span class=3D"hljs-comment">// Add hover styling to the given element<=
/span>
    setHoverStyle: <span class=3D"hljs-function"><span class=3D"hljs-keywor=
d">function</span>(<span class=3D"hljs-params">element</span>) </span>{},

    <span class=3D"hljs-comment">// Update the elements in response to new =
data</span>
    <span class=3D"hljs-comment">// @param reset : if true, put the element=
s into a reset state so they can animate to their final values</span>
    update: <span class=3D"hljs-function"><span class=3D"hljs-keyword">func=
tion</span>(<span class=3D"hljs-params">reset</span>) </span>{},
}
</code></pre>
<p>The following methods may optionally be overridden by derived dataset co=
ntrollers</p>
<pre><code class=3D"lang-javascript">{
    <span class=3D"hljs-comment">// Initializes the controller</span>
    initialize: <span class=3D"hljs-function"><span class=3D"hljs-keyword">=
function</span>(<span class=3D"hljs-params">chart, datasetIndex</span>) </s=
pan>{},

    <span class=3D"hljs-comment">// Ensures that the dataset represented by=
 this controller is linked to a scale. Overridden to helpers.noop in the po=
lar area and doughnut controllers as these</span>
    <span class=3D"hljs-comment">// chart types using a single scale</span>
    linkScales: <span class=3D"hljs-function"><span class=3D"hljs-keyword">=
function</span>(<span class=3D"hljs-params"></span>) </span>{},

    <span class=3D"hljs-comment">// Called by the main chart controller whe=
n an update is triggered. The default implementation handles the number of =
data points changing and creating elements appropriately. </span>
    buildOrUpdateElements: <span class=3D"hljs-function"><span class=3D"hlj=
s-keyword">function</span>(<span class=3D"hljs-params"></span>) </span>{}
}
</code></pre>
<h3 id=3D"advanced-usage-extending-existing-chart-types"><a class=3D"fragme=
nt-link" href=3D"http://www.chartjs.org/docs/#advanced-usage-extending-exis=
ting-chart-types">Extending Existing Chart Types</a></h3><p>Extending or re=
placing an existing controller type is easy. Simply replace the constructor=
 for one of the built in types with your own.</p>
<p>The built in controller types are:</p>
<ul>
<li><code>Chart.controllers.line</code></li>
<li><code>Chart.controllers.bar</code></li>
<li><code>Chart.controllers.radar</code></li>
<li><code>Chart.controllers.doughnut</code></li>
<li><code>Chart.controllers.polarArea</code></li>
<li><code>Chart.controllers.bubble</code></li>
</ul>
<h4>Bar Controller</h4><p>The bar controller has a special property that yo=
u should be aware of. To correctly calculate the width of a bar, the contro=
ller must determine the number of datasets that map to bars. To do this, th=
e bar controller attaches a property <code>bar</code> to the dataset during=
 initialization. If you are creating a replacement or updated bar controlle=
r, you should do the same. This will ensure that charts with regular bars a=
nd your new derived bars will work seamlessly.</p>
<h3 id=3D"advanced-usage-creating-plugins"><a class=3D"fragment-link" href=
=3D"http://www.chartjs.org/docs/#advanced-usage-creating-plugins">Creating =
Plugins</a></h3><p>Starting with v2.1.0, you can create plugins for chart.j=
s. To register your plugin, simply call <code>Chart.pluginService.register<=
/code> and pass your plugin in.
Plugins will be called at the following times</p>
<ul>
<li>Start of initialization</li>
<li>End of initialization</li>
<li>Start of update</li>
<li>After the chart scales have calculated</li>
<li>Start of datasets update</li>
<li>End of datasets update</li>
<li>End of update (before render occurs)</li>
<li>Start of draw</li>
<li>End of draw</li>
<li>Before datasets draw</li>
<li>After datasets draw</li>
<li>Resize</li>
<li>Before an animation is started</li>
</ul>
<p>Plugins should derive from Chart.PluginBase and implement the following =
interface</p>
<pre><code class=3D"lang-javascript">{
    beforeInit: <span class=3D"hljs-function"><span class=3D"hljs-keyword">=
function</span>(<span class=3D"hljs-params">chartInstance</span>) </span>{ =
},
    afterInit: <span class=3D"hljs-function"><span class=3D"hljs-keyword">f=
unction</span>(<span class=3D"hljs-params">chartInstance</span>) </span>{ }=
,

    resize: <span class=3D"hljs-function"><span class=3D"hljs-keyword">func=
tion</span>(<span class=3D"hljs-params">chartInstance, newChartSize</span>)=
 </span>{ },

    beforeUpdate: <span class=3D"hljs-function"><span class=3D"hljs-keyword=
">function</span>(<span class=3D"hljs-params">chartInstance</span>) </span>=
{ },
    afterScaleUpdate: <span class=3D"hljs-function"><span class=3D"hljs-key=
word">function</span>(<span class=3D"hljs-params">chartInstance</span>) </s=
pan>{ }
    beforeDatasetsUpdate: <span class=3D"hljs-function"><span class=3D"hljs=
-keyword">function</span>(<span class=3D"hljs-params">chartInstance</span>)=
 </span>{ }
    afterDatasetsUpdate: <span class=3D"hljs-function"><span class=3D"hljs-=
keyword">function</span>(<span class=3D"hljs-params">chartInstance</span>) =
</span>{ }
    afterUpdate: <span class=3D"hljs-function"><span class=3D"hljs-keyword"=
>function</span>(<span class=3D"hljs-params">chartInstance</span>) </span>{=
 },

    <span class=3D"hljs-comment">// This is called at the start of a render=
. It is only called once, even if the animation will run for a number of fr=
ames. Use beforeDraw or afterDraw</span>
    <span class=3D"hljs-comment">// to do something on each animation frame=
</span>
    beforeRender: <span class=3D"hljs-function"><span class=3D"hljs-keyword=
">function</span>(<span class=3D"hljs-params">chartInstance</span>) </span>=
{ },

    <span class=3D"hljs-comment">// Easing is for animation</span>
    beforeDraw: <span class=3D"hljs-function"><span class=3D"hljs-keyword">=
function</span>(<span class=3D"hljs-params">chartInstance, easing</span>) <=
/span>{ },
    afterDraw: <span class=3D"hljs-function"><span class=3D"hljs-keyword">f=
unction</span>(<span class=3D"hljs-params">chartInstance, easing</span>) </=
span>{ },
    <span class=3D"hljs-comment">// Before the datasets are drawn but after=
 scales are drawn</span>
    beforeDatasetsDraw: <span class=3D"hljs-function"><span class=3D"hljs-k=
eyword">function</span>(<span class=3D"hljs-params">chartInstance, easing</=
span>) </span>{ },
    afterDatasetsDraw: <span class=3D"hljs-function"><span class=3D"hljs-ke=
yword">function</span>(<span class=3D"hljs-params">chartInstance, easing</s=
pan>) </span>{ },

    destroy: <span class=3D"hljs-function"><span class=3D"hljs-keyword">fun=
ction</span>(<span class=3D"hljs-params">chartInstance</span>) </span>{ }
}
</code></pre>
<h3 id=3D"advanced-usage-building-chart-js"><a class=3D"fragment-link" href=
=3D"http://www.chartjs.org/docs/#advanced-usage-building-chart-js">Building=
 Chart.js</a></h3><p>Chart.js uses <a href=3D"http://gulpjs.com/" target=3D=
"_blank">gulp</a> to build the library into a single JavaScript file. </p>
<p>Firstly, we need to ensure development dependencies are installed. With =
node and npm installed, after cloning the Chart.js repo to a local director=
y, and navigating to that directory in the command line, we can run the fol=
lowing:</p>
<pre><code class=3D"lang-bash">npm install
npm install -g gulp
</code></pre>
<p>This will install the local development dependencies for Chart.js, along=
 with a CLI for the JavaScript task runner <a href=3D"http://gulpjs.com/" t=
arget=3D"_blank">gulp</a>.</p>
<p>Now, we can run the <code>gulp build</code> task.</p>
<pre><code class=3D"lang-bash">gulp build
</code></pre>

		</div>
	</section>

		=09
			=09
	<section id=3D"notes">
		<h2 class=3D"section-title">
			<a class=3D"fragment-link" href=3D"http://www.chartjs.org/docs/#notes">N=
otes</a>
		</h2>
		<div class=3D"section-text">
			<h3 id=3D"notes-previous-versions"><a class=3D"fragment-link" href=3D"ht=
tp://www.chartjs.org/docs/#notes-previous-versions">Previous versions</a></=
h3><p>Please note - documentation for previous versions are available on th=
e GitHub repo. Version 1.x may continue to receive updates for bug fixes or=
 high priority items.</p>
<ul>
<li><a href=3D"https://github.com/chartjs/Chart.js/tree/v1.1.1/docs" target=
=3D"_blank">1.x Documentation</a></li>
</ul>
<h3 id=3D"notes-browser-support"><a class=3D"fragment-link" href=3D"http://=
www.chartjs.org/docs/#notes-browser-support">Browser support</a></h3><p>Cha=
rt.js offers support for all browsers where canvas is supported.</p>
<p>Browser support for the canvas element is available in all modern &amp; =
major mobile browsers <a href=3D"http://caniuse.com/#feat=3Dcanvas" target=
=3D"_blank">(http://caniuse.com/#feat=3Dcanvas)</a>.</p>
<p>Thanks to <a href=3D"https://browserstack.com/" target=3D"_blank">Browse=
rStack</a> for allowing our team to test on thousands of browsers.</p>
<h3 id=3D"notes-bugs-amp-issues"><a class=3D"fragment-link" href=3D"http://=
www.chartjs.org/docs/#notes-bugs-amp-issues">Bugs &amp; issues</a></h3><p>P=
lease report these on the GitHub page - at <a href=3D"https://github.com/ch=
artjs/Chart.js" target=3D"_blank">github.com/chartjs/Chart.js</a>. If you c=
ould include a link to a simple <a href=3D"http://jsbin.com/" target=3D"_bl=
ank">jsbin</a> or similar to demonstrate the issue, that'd be really helpfu=
l.</p>
<h3 id=3D"notes-contributing"><a class=3D"fragment-link" href=3D"http://www=
.chartjs.org/docs/#notes-contributing">Contributing</a></h3><p>New contribu=
tions to the library are welcome, just a couple of guidelines:</p>
<ul>
<li>Tabs for indentation, not spaces please.</li>
<li>Please ensure you're changing the individual files in <code>/src</code>=
, not the concatenated output in the <code>Chart.js</code> file in the root=
 of the repo.</li>
<li>Please check that your code will pass <code>jshint</code> code standard=
s, <code>gulp jshint</code> will run this for you.</li>
<li>Please keep pull requests concise, and document new functionality in th=
e relevant <code>.md</code> file.</li>
<li>Consider whether your changes are useful for all users, or if creating =
a Chart.js extension would be more appropriate.</li>
</ul>
<h3 id=3D"notes-license"><a class=3D"fragment-link" href=3D"http://www.char=
tjs.org/docs/#notes-license">License</a></h3><p>Chart.js is open source and=
 available under the <a href=3D"http://opensource.org/licenses/MIT" target=
=3D"_blank">MIT license</a>.</p>

		</div>
	</section>

		=09
		</div>
		<hr>
		<footer>
			<div class=3D"footer-logo">
	<img src=3D"http://www.chartjs.org/img/icon.svg">
</div>
<p class=3D"footer-note">Chart.js was built from the hard work of all <a hr=
ef=3D"https://github.com/chartjs/Chart.js/contributors" target=3D"_blank">t=
hese contributors.</a>

		</p></footer>
	=09
=09



</body><style type=3D"text/css" id=3D"135820495632"></style></html>
------=_NextPart_000_2C6C_FCA04B9C.AFB8C24D
Content-Type: application/font-woff2
Content-Transfer-Encoding: base64
Content-Location: https://fonts.typekit.net/af/015ec8/00000000000000003b9ad1b5/27/l?primer=7ceb210e49ade74e23101e10f006f110a0b6588c7c57777a6e3d98a38b749696&fvd=n3

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
+M6dsAk8t4uyRB+LrBBmCbfzryD5/6EfdVZ+AgA=
------=_NextPart_000_2C6C_FCA04B9C.AFB8C24D
Content-Type: application/font-woff2
Content-Transfer-Encoding: base64
Content-Location: https://fonts.typekit.net/af/b5823a/00000000000000000001743c/27/l?primer=7ceb210e49ade74e23101e10f006f110a0b6588c7c57777a6e3d98a38b749696&fvd=n4

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
mXkFAAAA
------=_NextPart_000_2C6C_FCA04B9C.AFB8C24D
Content-Type: application/font-woff2
Content-Transfer-Encoding: base64
Content-Location: https://fonts.typekit.net/af/19eac5/00000000000000000001743e/27/l?primer=7ceb210e49ade74e23101e10f006f110a0b6588c7c57777a6e3d98a38b749696&fvd=n6

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
AA==
------=_NextPart_000_2C6C_FCA04B9C.AFB8C24D
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: http://www.chartjs.org/styles.css

html { font-family: sans-serif; }

body { margin: 0px; }

article, aside, details, figcaption, figure, footer, header, hgroup, main, =
menu, nav, section, summary { display: block; }

audio, canvas, progress, video { display: inline-block; vertical-align: bas=
eline; }

audio:not([controls]) { display: none; height: 0px; }

[hidden], template { display: none; }

a { background-color: transparent; }

a:active, a:hover { outline: 0px; }

abbr[title] { border-bottom-width: 1px; border-bottom-style: dotted; }

b, strong { font-weight: bold; }

dfn { font-style: italic; }

h1 { font-size: 2em; margin: 0.67em 0px; }

mark { color: rgb(0, 0, 0); background: rgb(255, 255, 0); }

small { font-size: 80%; }

sub, sup { font-size: 75%; line-height: 0; position: relative; vertical-ali=
gn: baseline; }

sup { top: -0.5em; }

sub { bottom: -0.25em; }

img { border: 0px; }

svg:not(:root) { overflow: hidden; }

figure { margin: 1em 40px; }

hr { box-sizing: content-box; height: 0px; }

pre { overflow: auto; }

code, kbd, pre, samp { font-family: monospace, monospace; font-size: 1em; }

button, input, optgroup, select, textarea { color: inherit; font-style: inh=
erit; font-variant: inherit; font-weight: inherit; font-stretch: inherit; f=
ont-size: inherit; line-height: inherit; font-family: inherit; margin: 0px;=
 }

button { overflow: visible; }

button, select { text-transform: none; }

button, html input[type=3D"button"], input[type=3D"reset"], input[type=3D"s=
ubmit"] { -webkit-appearance: button; cursor: pointer; }

button[disabled], html input[disabled] { cursor: default; }

input { line-height: normal; }

input[type=3D"checkbox"], input[type=3D"radio"] { box-sizing: border-box; p=
adding: 0px; }

input[type=3D"number"]::-webkit-inner-spin-button, input[type=3D"number"]::=
-webkit-outer-spin-button { height: auto; }

input[type=3D"search"] { -webkit-appearance: textfield; box-sizing: content=
-box; }

input[type=3D"search"]::-webkit-search-cancel-button, input[type=3D"search"=
]::-webkit-search-decoration { -webkit-appearance: none; }

fieldset { border: 1px solid rgb(192, 192, 192); margin: 0px 2px; padding: =
0.35em 0.625em 0.75em; }

legend { border: 0px; padding: 0px; }

textarea { overflow: auto; }

optgroup { font-weight: bold; }

table { border-collapse: collapse; border-spacing: 0px; }

td, th { padding: 0px; }

* { box-sizing: border-box; }

html { font-size: 100%; -webkit-font-smoothing: antialiased; }

@media only screen and (max-width: 768px) {=20
  html { font-size: 80%; }
}

body { color: rgb(51, 53, 56); font-family: proxima-nova, sans-serif; }

body.sidebar-padded { padding-left: 240px; }

@media only screen and (max-width: 768px) {=20
  body.sidebar-padded { padding-left: 220px; }
}

@media only screen and (max-width: 500px) {=20
  body.sidebar-padded { padding-left: 0px; }
}

.homepage { position: relative; padding-top: 120px; }

.background-chart { top: 0px; left: 0px; position: absolute; width: 100%; h=
eight: 380px; overflow: hidden; background-color: rgb(231, 233, 237); }

.background-chart canvas { display: block; margin-top: 5px; }

.content-overlay { position: relative; max-width: 800px; margin: 0px auto; =
box-shadow: rgba(0, 0, 0, 0.2) 0px 1px 2px; padding: 30px 60px; background-=
color: rgb(255, 255, 255); }

@media only screen and (max-width: 768px) {=20
  .content-overlay { padding-left: 20px; padding-right: 20px; }
}

.documentation-header, .documentation-body { max-width: 1200px; margin: 20p=
x auto; padding: 30px 60px; }

@media only screen and (max-width: 768px) {=20
  .documentation-header, .documentation-body { padding-left: 40px; padding-=
right: 40px; }
}

@media only screen and (max-width: 500px) {=20
  .documentation-header, .documentation-body { padding-left: 20px; padding-=
right: 20px; }
}

.documentation-header { padding-bottom: 0px; }

@media only screen and (max-width: 500px) {=20
  .documentation-header { text-align: center; }
}

.documentation-header .chart-logo, .documentation-header .documentation-tit=
le-wrapper { float: left; }

@media only screen and (max-width: 500px) {=20
  .documentation-header .chart-logo, .documentation-header .documentation-t=
itle-wrapper { float: none; }
}

.documentation-header .documentation-title-wrapper { margin: 1em 0px; paddi=
ng: 1em; }

@media only screen and (max-width: 500px) {=20
  .documentation-header .documentation-title-wrapper { margin: 0px; }
}

.documentation-header::before, .documentation-header::after { content: " ";=
 display: table; }

.documentation-header::after { clear: both; }

.documentation-body { padding-top: 0px; }

.documentation-body h1, .documentation-body h2, .documentation-body h3, .do=
cumentation-body h4, .documentation-body h5, .documentation-body h6 { posit=
ion: relative; font-family: proxima-nova-soft, sans-serif; }

.documentation-body h2 { margin-top: 2.5rem; }

.documentation-body h3 { margin-top: 2rem; }

.documentation-body .half { width: 50%; float: left; padding-bottom: 20px; =
}

@media only screen and (max-width: 768px) {=20
  .documentation-body .half { width: auto; float: none; }
}

.documentation-body .half:nth-child(2)::after { clear: both; content: ""; d=
isplay: table; }

.sidebar { width: 240px; padding: 0.2rem 0px; position: fixed; top: 0px; le=
ft: 0px; max-height: 100%; overflow-y: auto; border-right-width: 1px; borde=
r-right-style: solid; border-right-color: rgb(231, 233, 237); }

@media only screen and (max-width: 768px) {=20
  .sidebar { width: 220px; }
}

@media only screen and (max-width: 500px) {=20
  .sidebar { display: none; }
}

.sidebar .sidebar-section { padding: 0.4rem 0px; }

.sidebar .section-link { margin: 0px; display: block; padding: 0.4rem 0.8re=
m; font-weight: bold; }

.sidebar ul { padding: 0px; margin: 0px; }

.sidebar ul li { list-style: none; display: block; margin: 0px; padding: 0.=
4rem 0.8rem 0.4rem 1.2rem; font-size: 0.9rem; }

.sidebar a { transition: color 120ms ease-out, border-color 120ms ease-out;=
 color: rgb(75, 78, 83); border-bottom-color: transparent; }

.sidebar a:hover { border-bottom-color: rgb(54, 162, 235); color: rgb(54, 1=
62, 235); }

.hero-container { text-align: center; }

.hero-title { font-family: proxima-nova-soft, sans-serif; font-size: 3.75re=
m; font-weight: 600; margin: 0px; }

.hero-subtitle { font-family: proxima-nova-soft, sans-serif; font-weight: 4=
00; font-size: 1.25rem; }

.subtitle { font-family: proxima-nova-soft, sans-serif; font-weight: 600; f=
ont-size: 1.25rem; }

.subtitle__small { font-size: 1rem; }

.description { font-weight: 300; line-height: 1.5; }

.description__small { font-size: 0.875rem; }

.footer-note { font-family: proxima-nova-soft, sans-serif; font-weight: 600=
; }

a { color: rgb(54, 162, 235); text-decoration: none; border-bottom-width: 1=
px; border-bottom-style: solid; border-bottom-color: rgb(54, 162, 235); }

.fragment-link { color: rgb(51, 53, 56); border-bottom-width: 0px; }

.fragment-link::before { content: "#"; color: rgba(51, 53, 56, 0.0980392); =
transition: color 100ms ease-out; position: absolute; left: -1.25rem; }

.fragment-link:hover::before { color: rgb(51, 53, 56); }

.button { border: 0px; text-align: center; display: inline-block; padding: =
16px; margin: 0px 8px; color: rgb(255, 255, 255); border-radius: 8px; font-=
family: proxima-nova-soft, sans-serif; font-weight: 600; text-decoration: n=
one; transition: box-shadow 200ms ease-out; background-color: rgb(231, 233,=
 237); }

.button:hover { box-shadow: rgba(0, 0, 0, 0.4) 0px 1px 5px; }

.button:active { box-shadow: rgba(0, 0, 0, 0.2) 0px 1px 3px inset; }

.button__red { background-color: rgb(255, 99, 132); }

.button__blue { background-color: rgb(54, 162, 235); }

.pill { padding: 8px; font-size: 0.875rem; vertical-align: middle; display:=
 inline-block; color: rgb(255, 255, 255); border-radius: 8px; background-co=
lor: rgb(75, 192, 192); }

.pill__new { margin-right: 8px; }

hr { display: block; max-width: 50%; margin: 40px auto; border-width: 0px 0=
px 1px; border-bottom-style: solid; border-bottom-color: rgb(231, 233, 237)=
; background-color: transparent; }

.table-wrapper { margin: 40px 0px; width: 100%; overflow-x: auto; border: 1=
px solid rgb(231, 233, 237); }

table { min-width: 100%; border-collapse: collapse; }

table td, table th { text-align: left; padding: 12px; border-bottom-width: =
1px; border-bottom-style: solid; border-bottom-color: rgb(231, 233, 237); b=
order-right-width: 1px; border-right-style: solid; border-right-color: rgba=
(231, 233, 237, 0.498039); }

table td:last-child, table th:last-child { border-right-width: 0px; }

table th { background-color: rgba(231, 233, 237, 0.4); }

table tr:nth-child(2n) td { background-color: rgba(231, 233, 237, 0.2); }

table tr:last-child td, table tr:last-child th { border-bottom-width: 0px; =
}

pre { margin: 2rem 0px; max-width: 100%; overflow-x: auto; padding: 12px 20=
px; border-radius: 8px; background-color: rgba(231, 233, 237, 0.4); }

ul li { margin-top: 0.6rem; }

.chart-logo { margin: 1em 0px; }

.hero-button-wrapper { padding: 20px 0px; }

.hero-button-wrapper .button { width: 180px; }

@media only screen and (max-width: 500px) {=20
  .hero-button-wrapper .button { width: 120px; }
}

.feature-text, .feature-chart { float: left; width: 50%; }

.feature-text__pull-right, .feature-chart__pull-right { float: right; }

@media only screen and (max-width: 768px) {=20
  .feature-text, .feature-chart { width: 100%; float: none; max-width: 600p=
x; margin-left: auto; margin-right: auto; }
}

.feature-text { padding-top: 30px; }

.feature-chart__left { padding-right: 20px; }

.feature-chart__right { padding-left: 20px; }

@media only screen and (max-width: 768px) {=20
  .feature-chart { padding: 0px; }
}

@media only screen and (max-width: 768px) {=20
  .feature-chart canvas { max-width: 300px; margin: 0px auto; display: bloc=
k; }
}

.feature-small-container { margin: 0px -10px; }

.feature-small-container::before, .feature-small-container::after { content=
: " "; display: table; }

.feature-small-container::after { clear: both; }

.feature-small { float: left; padding: 10px; width: 25%; text-align: center=
; }

@media only screen and (max-width: 768px) {=20
  .feature-small { width: 50%; }
}

@media only screen and (max-width: 768px) {=20
  .feature-small:nth-child(3) { clear: left; }
}

.feature::before, .feature::after { content: " "; display: table; }

.feature::after { clear: both; }

.link-container { padding: 5px 0px 20px; text-align: center; }

footer { padding: 40px 0px; text-align: center; }

::selection { color: rgb(255, 255, 255); background-color: rgb(255, 99, 132=
); }

@-webkit-keyframes fade-in {=20
  0% { opacity: 0; }
  100% { opacity: 1; }
}

@keyframes fade-in {=20
  0% { opacity: 0; }
  100% { opacity: 1; }
}

@-webkit-keyframes fade-in-up {=20
  0% { opacity: 0; transform: translateY(100px) rotate3d(0, 0, 1, 8deg); }
  100% { opacity: 1; transform: none; }
}

@keyframes fade-in-up {=20
  0% { opacity: 0; transform: translateY(100px) rotate3d(0, 0, 1, 8deg); }
  100% { opacity: 1; transform: none; }
}

.fade-in, .fade-in-up { animation-fill-mode: forwards; animation-duration: =
1000ms; animation-timing-function: ease-in-out; }

.cssanimations .fade-in, .cssanimations .fade-in-up { opacity: 0; }

.fade-in { animation-name: fade-in; }

.fade-in-up { animation-name: fade-in-up; }

.animation-delay__1 { animation-delay: 100ms; }

.animation-delay__2 { animation-delay: 200ms; }

.animation-delay__3 { animation-delay: 300ms; }

.animation-delay__4 { animation-delay: 400ms; }

.animation-delay__5 { animation-delay: 500ms; }

.animation-delay__6 { animation-delay: 600ms; }

.animation-delay__7 { animation-delay: 700ms; }

.animation-delay__8 { animation-delay: 800ms; }

.animation-delay__9 { animation-delay: 900ms; }

.animation-delay__10 { animation-delay: 1000ms; }

.hljs-comment, .hljs-quote { color: rgb(173, 180, 193); }

.hljs-variable, .hljs-template-variable, .hljs-tag, .hljs-name, .hljs-selec=
tor-id, .hljs-selector-class, .hljs-regexp, .hljs-deletion { color: rgb(255=
, 99, 132); }

.hljs-number, .hljs-built_in, .hljs-builtin-name, .hljs-literal, .hljs-type=
, .hljs-params, .hljs-meta, .hljs-link { color: rgb(255, 142, 114); }

.hljs-attribute { color: rgb(188, 133, 0); }

.hljs-string, .hljs-symbol, .hljs-bullet, .hljs-addition { color: rgb(69, 1=
83, 205); }

.hljs-title, .hljs-section { color: rgb(54, 162, 235); }

.hljs-keyword, .hljs-selector-tag { color: rgb(175, 124, 173); }

.hljs { display: block; overflow-x: auto; color: rgb(234, 234, 234); paddin=
g: 0.5em; background: black; }

.hljs-emphasis { font-style: italic; }

.hljs-strong { font-weight: bold; }
------=_NextPart_000_2C6C_FCA04B9C.AFB8C24D
Content-Type: image/svg+xml
Content-Transfer-Encoding: quoted-printable
Content-Location: http://www.chartjs.org/img/chartjs-logo.svg

<svg width=3D"160" height=3D"160" viewBox=3D"0 0 160 160" xmlns=3D"http://w=
ww.w3.org/2000/svg"><title>Artboard 6</title><g fill=3D"none" fill-rule=3D"=
evenodd"><path d=3D"M144.086 80.568c-21.978.43-17.402 14.346-32.89 17.866C9=
5.46 102.01 92.975 60 77.243 60c-15.733 0-19.216 40.806-38.918 68.823l-.56.=
794L80 154l64.086-37V80.568z" fill=3D"#36A2EB"/><path d=3D"M144.086 79.3C13=
6.726 69.856 131.736 59 121 59c-19 0-14 31-35 31s-23.207-33.346-47-2c-7.58 =
9.988-13.682 21.124-18.475 31.662L80 154l64.086-37V79.3z" fill=3D"#FFCE56"/=
><path d=3D"M15.914 92.143C23.124 72.173 26.237 56 40 56c21 0 26 59 44 53s1=
6-38 44-38c5.33 0 10.772 3.263 16.086 8.546V117L80 154l-64.086-37V92.143z" =
fill-opacity=3D".8" fill=3D"#FE6184"/><path stroke=3D"#E7E9ED" stroke-width=
=3D"8" d=3D"M80 6l64.086 37v74L80 154l-64.086-37V43z"/></g></svg>
------=_NextPart_000_2C6C_FCA04B9C.AFB8C24D
Content-Type: image/svg+xml
Content-Transfer-Encoding: quoted-printable
Content-Location: http://www.chartjs.org/img/icon.svg

<?xml version=3D"1.0" encoding=3D"UTF-8" standalone=3D"no"?>
<svg width=3D"60px" height=3D"60px" viewBox=3D"0 0 60 60" version=3D"1.1" x=
mlns=3D"http://www.w3.org/2000/svg" xmlns:xlink=3D"http://www.w3.org/1999/x=
link">
    <!-- Generator: Sketch 3.6.1 (26313) - http://www.bohemiancoding.com/sk=
etch -->
    <title>Footer</title>
    <desc>Created with Sketch.</desc>
    <defs>
        <polygon id=3D"path-1" points=3D"23 0.5 45.9496732 13.75 45.9496732=
 40.25 23 53.5 0.0503267997 40.25 0.0503267997 13.75 "></polygon>
    </defs>
    <g id=3D"Page-1" stroke=3D"none" stroke-width=3D"1" fill=3D"none" fill-=
rule=3D"evenodd">
        <g id=3D"Desktop-HD" transform=3D"translate(-688.000000, -1752.0000=
00)">
            <g id=3D"Footer" transform=3D"translate(335.000000, 1752.000000=
)">
                <g id=3D"Icon" transform=3D"translate(360.000000, 3.000000)=
">
                    <g id=3D"Group-5">
                        <mask id=3D"mask-2" fill=3D"white">
                            <use xlink:href=3D"#path-1"></use>
                        </mask>
                        <use id=3D"Polygon-5" xlink:href=3D"#path-1"></use>
                        <g id=3D"Path-Copy" mask=3D"url(#mask-2)">
                            <g transform=3D"translate(-19.000000, 20.635753=
)" id=3D"Mask">
                                <path d=3D"M26.6025901,25.775863 C33.849244=
1,15.8590287 35.1305976,1.41580873 40.9174598,1.41580873 C46.704322,1.41580=
873 47.6180371,16.2849328 53.4048994,15.0194754 C59.1917616,13.754018 57.36=
43314,8.69218858 65.8923389,8.69218858 C74.4203464,8.69218858 83.862069,37.=
1649793 83.862069,37.1649793 L16.5517241,37.1649793 C16.5517241,37.1649793 =
19.3559361,35.6926973 26.6025901,25.775863 Z" fill=3D"#E6E9EE"></path>
                                <path d=3D"M26.8505747,11.3264699 C35.60199=
84,0.2313979 36.4137931,12.0343743 44.137931,12.0343743 C51.862069,12.03437=
43 50.0229885,1.06185659 57.0114943,1.06185658 C64,1.06185657 64.3678161,13=
.0962308 74.6666667,13.0962308 C84.9655172,13.0962308 96,37.5189315 96,37.5=
189315 L14.7126437,37.5189315 C14.7126437,37.5189315 18.099151,22.4215419 2=
6.8505747,11.3264699 Z" fill=3D"#F3F5FA"></path>
                                <path d=3D"M12.137931,24.4227007 C20.889354=
8,13.3276287 19.4942529,0 27.2183908,0 C34.9425287,0 36.7816092,20.8831788 =
43.4022989,18.7594657 C50.0229885,16.6357526 49.2873563,5.30928275 59.58620=
69,5.30928275 C69.8850575,5.30928275 81.2873563,37.1649793 81.2873563,37.16=
49793 L-2.61349052e-15,37.1649793 C-2.61349052e-15,37.1649793 3.38650731,35=
.5177727 12.137931,24.4227007 Z" fill-opacity=3D"0.8" fill=3D"#D5D7DC"></pa=
th>
                            </g>
                        </g>
                    </g>
                    <polygon id=3D"Polygon-5" stroke=3D"#E7E9ED" stroke-wid=
th=3D"3" points=3D"23 0.5 45.9496732 13.75 45.9496732 40.25 23 53.5 0.05032=
67997 40.25 0.0503267997 13.75 "></polygon>
                </g>
            </g>
        </g>
    </g>
</svg>
------=_NextPart_000_2C6C_FCA04B9C.AFB8C24D
Content-Type: text/html
Content-Transfer-Encoding: quoted-printable
Content-Location: wyciwyg://frame/1

<html><head><meta http-equiv=3D"Content-Type" content=3D"text/html; charset=
=3DGBK"></head><body></body></html>
------=_NextPart_000_2C6C_FCA04B9C.AFB8C24D
Content-Type: text/html
Content-Transfer-Encoding: quoted-printable
Content-Location: wyciwyg://frame/0

<html><head><meta http-equiv=3D"Content-Type" content=3D"text/html; charset=
=3DGBK"></head><body></body></html>
------=_NextPart_000_2C6C_FCA04B9C.AFB8C24D
Content-Type: text/html
Content-Transfer-Encoding: quoted-printable
Content-Location: wyciwyg://frame/2

<html><head><meta http-equiv=3D"Content-Type" content=3D"text/html; charset=
=3DGBK"></head><body></body></html>
------=_NextPart_000_2C6C_FCA04B9C.AFB8C24D
Content-Type: text/html
Content-Transfer-Encoding: quoted-printable
Content-Location: wyciwyg://frame/3

<html><head><meta http-equiv=3D"Content-Type" content=3D"text/html; charset=
=3DGBK"></head><body></body></html>
------=_NextPart_000_2C6C_FCA04B9C.AFB8C24D
Content-Type: text/html
Content-Transfer-Encoding: quoted-printable
Content-Location: wyciwyg://frame/4

<html><head><meta http-equiv=3D"Content-Type" content=3D"text/html; charset=
=3DGBK"></head><body></body></html>
------=_NextPart_000_2C6C_FCA04B9C.AFB8C24D
Content-Type: text/html
Content-Transfer-Encoding: quoted-printable
Content-Location: wyciwyg://frame/5

<html><head><meta http-equiv=3D"Content-Type" content=3D"text/html; charset=
=3DGBK"></head><body></body></html>
------=_NextPart_000_2C6C_FCA04B9C.AFB8C24D
Content-Type: text/html
Content-Transfer-Encoding: quoted-printable
Content-Location: wyciwyg://frame/6

<html><head><meta http-equiv=3D"Content-Type" content=3D"text/html; charset=
=3DGBK"></head><body></body></html>
------=_NextPart_000_2C6C_FCA04B9C.AFB8C24D--
